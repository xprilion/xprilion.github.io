1:"$Sreact.fragment"
2:I[6575,["177","static/chunks/app/layout-03b28790fff4d2e4.js"],"ThemeProvider"]
3:I[4922,[],""]
4:I[3720,[],""]
5:I[3369,["177","static/chunks/app/layout-03b28790fff4d2e4.js"],"GoogleAnalytics"]
7:I[2466,[],"MetadataBoundary"]
9:I[2466,[],"OutletBoundary"]
c:I[6114,[],"AsyncMetadataOutlet"]
e:I[2466,[],"ViewportBoundary"]
10:I[4797,[],""]
:HL["/_next/static/media/22966f4f11fece13-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/3df4cf0b22f61940-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/a481f011d1f4a14b-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/feff4f1fc62fae3c-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/5d465971106e06ba.css","style"]
:HL["/_next/static/css/2dba37557e579c7e.css","style"]
:HL["/_next/static/css/f3b8208e8dab82f4.css","style"]
0:{"P":null,"b":"8NeNt-6z7kYm6d_0EEedd","p":"","c":["","codelabs","gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab"],"i":false,"f":[[["",{"children":["codelabs",{"children":[["slug","gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5d465971106e06ba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/2dba37557e579c7e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_6ab973","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"/apple-icon.png","sizes":"96x96"}],["$","link",null,{"rel":"icon","type":"image/svg+xml","href":"/icon0.svg"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"xprilion's blog"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","meta",null,{"name":"theme-color","content":"#7b46f6"}],["$","meta",null,{"charSet":"utf-8"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta",null,{"itemProp":"name","content":"xprilion's blog"}],["$","meta",null,{"itemProp":"description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"itemProp":"image","content":"/favicon.png"}],["$","meta",null,{"property":"og:title","content":"xprilion's blog"}],["$","meta",null,{"property":"og:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"property":"og:image","content":"/favicon.png"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@xprilion"}],["$","meta",null,{"name":"twitter:creator","content":"@xprilion"}],["$","meta",null,{"name":"twitter:title","content":"xprilion's blog"}],["$","meta",null,{"name":"twitter:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"name":"twitter:image","content":"/favicon.png"}]]}],["$","body",null,{"className":"antialiased","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}],["$","$L5",null,{"gaId":"G-NKJL65V2YL"}]]}]]}],{"children":["codelabs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",["$","$L7",null,{"children":"$L8"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b8208e8dab82f4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L9",null,{"children":["$La","$Lb",["$","$Lc",null,{"promise":"$@d"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","PAD8k-scCNy_gg24uTv8t",{"children":[["$","$Le",null,{"children":"$Lf"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[6114,[],"AsyncMetadata"]
8:["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]
b:null
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
14:I[5378,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","585","static/chunks/585-ef9a120e1d77e4af.js","182","static/chunks/app/codelabs/%5Bslug%5D/page-696caa01994dec0e.js"],"default"]
15:I[4518,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","585","static/chunks/585-ef9a120e1d77e4af.js","182","static/chunks/app/codelabs/%5Bslug%5D/page-696caa01994dec0e.js"],"default"]
17:I[1999,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","585","static/chunks/585-ef9a120e1d77e4af.js","182","static/chunks/app/codelabs/%5Bslug%5D/page-696caa01994dec0e.js"],""]
18:I[4046,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","585","static/chunks/585-ef9a120e1d77e4af.js","182","static/chunks/app/codelabs/%5Bslug%5D/page-696caa01994dec0e.js"],""]
16:T2284,<h2 id="overview">Overview</h2><p>Duration: 1</p><p>Hey there!</p><p>In this codelab, you'll explore building a Python Flask application that leverages Gemini Pro Vision Multimodal's capabilities to perform tasks like image classification, object detection, and text understanding. By the end, you'll have a practical understanding of integrating Gemini Pro Vision into your backend applications.</p><h2 id="requirements">Requirements</h2><p>Duration: 2</p><p>In order to follow this codelab, you'll need the following:</p><ol><li>A development environment with Python 3.7 or above installed.</li><li>Access to terminal/shell for executing commands.</li><li>Basic understanding of Python and Flask</li><li>Familiarity with REST APIs is helpful but not mandatory</li><li>Access to a Gemini Pro Vision model</li></ol><h2 id="setting-up-your-dev-environment">Setting Up Your Dev Environment</h2><p>Duration: 10</p><ol><li>Log in to your <a href="https://makersuite.google.com/">Google AI Studio</a> account.</li><li>Create a new <code>API KEY</code>.</li><li>Note the API Key in a secure location.</li></ol><h2 id="setting-up-your-local-environment">Setting Up Your Local Environment</h2><p>Duration: 5</p><p>Install other required libraries:</p><pre><code class="language-bash">pip install marko google-generativeai
</code></pre><p>Install Flask:</p><pre><code class="language-bash">pip install Flask
</code></pre><h2 id="write-the-driving-code">Write the driving code</h2><p>Duration: 10</p><ol><li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li></ol><pre><code class="language-python">import os
from flask import Flask, request, Response, g, render_template, jsonify
import marko
import google.generativeai as genai
</code></pre><ol><li><strong>Initializing the App and Gemini API</strong>: We initialize our Flask app and load the Gemini API client.</li></ol><pre><code class="language-python">genai.configure(api_key=os.getenv("API_KEY"))

app = Flask(__name__)
app.debug = True

config = {
  'temperature': 0,
  'top_k': 20,
  'top_p': 0.9,
  'max_output_tokens': 500
}
</code></pre><p>We also need to confiugre the security settings for the model output:</p><pre><code class="language-python">safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  }
]

model = genai.GenerativeModel(model_name="gemini-pro-vision",
                              generation_config=config,
                              safety_settings=safety_settings)
</code></pre><ol><li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li></ol><pre><code class="language-python">@app.route('/', methods=['GET'])
def hello_world():
    return render_template("chat.html")

@app.route('/chat', methods=['POST'])
def chat():
    if 'user_image' not in request.files:
        return jsonify({"error": "No file part"})

    file = request.files['user_image']

    if file.filename == '':
        return jsonify({"error": "No selected file"})

    if file:
        image_data = file.read()
        image_parts = [
            {
                "mime_type": file.content_type,
                "data": image_data
            },
        ]

        prompt_parts = [
            "You are Sheldon Cooper. User will upload an image. Based on the image, you have to come up with a Sheldon Cooper style fun fact. Also give a funny, sarcastic note about the image. \n\nUser's image:\n\n",
            image_parts[0],
            "\n\nFun fact:\n",
        ]    

        response = model.generate_content(prompt_parts)

        return jsonify({
            "response": marko.convert(response.text)
        })
</code></pre><p>Finally, we'll add the entrypoint for the file which runs the Flask development server.</p><pre><code class="language-python">if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
</code></pre><p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p><h2 id="ui-for-the-application">UI for the application</h2><p>Duration: 10</p><p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p><pre><code class="language-html">&lt;div&gt;
    &lt;div id="chat-box" class="bg-light p-3 mb-3 rounded"&gt;
        &lt;blockquote style="border-left: 4px solid #43a047;"&gt;Hi, I am Sheldon Cooper. Upload an image and I will tell you a fun fact.&lt;/blockquote&gt;
    &lt;/div&gt;
    &lt;progress id="progress-bar" style="display: none"&gt;&lt;/progress&gt;
    
    &lt;!-- Updated form to include file upload --&gt;
    &lt;form id="chat-form"&gt;
        &lt;div class="input-group mb-3"&gt;
            &lt;input id="image-input" type="file" class="form-control"&gt;
        &lt;/div&gt;
        &lt;div class="input-group"&gt;
            &lt;button type="submit" id="send-button" class="btn btn-primary"&gt;Upload&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre><p>Then, let's add some JavaScript to the page for interactivity:</p><pre><code class="language-html">&lt;script&gt;
function appendImageToChat(file) {
    var reader = new FileReader();

    reader.onloadend = function () {
        var img = $('&lt;img&gt;').attr('src', reader.result).css({'max-width': '100%', 'height': 'auto'});
        $('#chat-box').append($('&lt;blockquote&gt;').css({'border-left': '4px solid dodgerblue'}).append(img));
    }

    if (file) {
        reader.readAsDataURL(file);
    }
}

$(function() {
    $('#chat-form').submit(function(e) {
        e.preventDefault(); // Prevent the default form submission

        var formData = new FormData(this);
        var fileInput = $('#image-input')[0].files[0];

        formData.append('user_image', fileInput);

        if (fileInput) {
            $('#chat-box').append('&lt;blockquote style="border-left: 4px solid #1288ff;"&gt;User: &lt;/blockquote&gt;');
            appendImageToChat(fileInput);
            $('#image-input').val('');
            $('#progress-bar').show();
            
            // Use AJAX to send the formData to the server
            $.ajax({
                url: '/chat',
                type: 'POST',
                data: formData,
                processData: false, // Prevent jQuery from converting the data into a query string
                contentType: false, // Set content type to false as jQuery will tell the server its a query string request
                success: function(data) {
                    $('#chat-box').append('&lt;blockquote style="border-left: 4px solid #43a047;"&gt;Sheldon: ' + data.response + '&lt;/blockquote&gt;');
                    $('#progress-bar').hide();
                },
                error: function() {
                    $('#chat-box').append('&lt;blockquote style="border-left: 4px solid red;"&gt;Sheldon: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;');
                    $('#progress-bar').hide();
                }
            });
        }
    });
});
&lt;/script&gt;
</code></pre><h2 id="running-the-app">Running the App</h2><p>Duration: 2</p><ol><li>Open your web browser and go to <a href="http://localhost:8080"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</li></ol><p>Run your application:</p><pre><code class="language-bash">python main.py
</code></pre><p>Set the <code>API_KEY</code> as environment variable in the terminal:</p><pre><code class="language-bash">export API_KEY=your_api_key
</code></pre><h2 id="interacting-with-your-chatbot">Interacting with Your Chatbot</h2><p>Duration: 2</p><ol><li>The bot will greet you asking you to provide an image.</li><li>Upload a JPG/PNG below 1MB to the interface and click Upload.</li><li>The chatbot will respond with a fun fact about the image!</li></ol><h2 id="conclusion">Conclusion</h2><p>Duration: 1</p><p>Congratulations! You've just built and deployed a software powered by Google's Gemini AI! This bot acts like Sheldon Cooper and provides facts about user's uploaded images!</p><h2 id="whats-next">What's Next?</h2><p>Duration: 1</p><ul><li>Experiment with different model parameters to see how they affect the output.</li><li>Try integrating this chatbot into a larger web application.</li><li>Explore other capabilities of Gemini AI.</li></ul>6:["$","div",null,{"className":"flex flex-col min-h-screen px-2 md:px-4 bg-background text-foreground","children":[["$","$L14",null,{"title":"Python Flask app with Gemini Pro Vision Multimodal","closeBtn":true}],["$","main",null,{"className":"flex-grow w-full px-1","children":["$","div",null,{"className":"w-full py-2","children":["$","$L15",null,{"htmlContent":"$16","upperContent":"$undefined","bottomContent":"$undefined"}]}]}],["$","div",null,{"className":"w-full mx-auto py-6 max-w-6xl px-4 border-t border-border","children":["$","div",null,{"className":"flex flex-col sm:flex-row justify-between gap-2","children":[["$","div",null,{"className":"text-center sm:text-left text-foreground","children":["© Anubhav Singh ",2025]}],["$","div",null,{"className":"text-center sm:text-right","children":[["$","$L17",null,{"href":"/sitemap.xml","className":"text-foreground hover:text-blue-600 dark:hover:text-primary","children":"Sitemap"}],["$","span",null,{"className":"mx-1 text-foreground","children":"·"}],["$","$L17",null,{"href":"/newsletter","className":"text-foreground hover:text-blue-600 dark:hover:text-primary","children":"Newsletter"}]]}]]}]}],["$","$L18",null,{"id":"MathJax-script","src":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.js","async":true}],["$","$L18",null,{"id":"MathJax-config","dangerouslySetInnerHTML":{"__html":"\n            MathJax = {\n              tex: {\n                inlineMath: [['((', '))']],\n                displayMath: [['[[', ']]']],\n              },\n              svg: {\n                fontCache: 'global'\n              }\n            };\n          "}}]]}]
13:{"metadata":[["$","title","0",{"children":"Python Flask app with Gemini Pro Vision Multimodal | xprilion's blog"}],["$","meta","1",{"name":"description","content":"A starter example of using Gemini AI Pro Vision Multimodal model via Google AI Studio (formerly MakerSuite)."}],["$","link","2",{"rel":"icon","href":"/logo.jpg"}]],"error":null,"digest":"$undefined"}
d:{"metadata":"$13:metadata","error":null,"digest":"$undefined"}
