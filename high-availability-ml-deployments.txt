1:"$Sreact.fragment"
2:I[6575,["177","static/chunks/app/layout-29f44809ba3fe938.js"],"ThemeProvider"]
3:I[4922,[],""]
4:I[3720,[],""]
6:I[2466,[],"MetadataBoundary"]
8:I[2466,[],"OutletBoundary"]
b:I[6114,[],"AsyncMetadataOutlet"]
d:I[2466,[],"ViewportBoundary"]
f:I[4797,[],""]
:HL["/_next/static/media/22966f4f11fece13-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/3df4cf0b22f61940-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/a481f011d1f4a14b-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/feff4f1fc62fae3c-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/2dba37557e579c7e.css","style"]
:HL["/_next/static/css/17c99d248f3289f7.css","style"]
:HL["/_next/static/css/f3b8208e8dab82f4.css","style"]
0:{"P":null,"b":"8WD7Z2etc2CPBM__kEqnI","p":"","c":["","high-availability-ml-deployments"],"i":false,"f":[[["",{"children":["(blog)",{"children":[["slug","high-availability-ml-deployments","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2dba37557e579c7e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/17c99d248f3289f7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_6ab973","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"/apple-icon.png","sizes":"96x96"}],["$","link",null,{"rel":"icon","type":"image/svg+xml","href":"/icon0.svg"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"xprilion's blog"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","meta",null,{"name":"theme-color","content":"#7b46f6"}],["$","meta",null,{"charSet":"utf-8"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta",null,{"itemProp":"name","content":"xprilion's blog"}],["$","meta",null,{"itemProp":"description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"itemProp":"image","content":"/favicon.png"}],["$","meta",null,{"property":"og:title","content":"xprilion's blog"}],["$","meta",null,{"property":"og:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"property":"og:image","content":"/favicon.png"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@xprilion"}],["$","meta",null,{"name":"twitter:creator","content":"@xprilion"}],["$","meta",null,{"name":"twitter:title","content":"xprilion's blog"}],["$","meta",null,{"name":"twitter:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"name":"twitter:image","content":"/favicon.png"}]]}],["$","body",null,{"className":"antialiased","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":["(blog)",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:style","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:1:props:style","children":404}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:2:props:style","children":["$","h2",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:2:props:children:props:style","children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","high-availability-ml-deployments","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",["$","$L6",null,{"children":"$L7"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b8208e8dab82f4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L8",null,{"children":["$L9","$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","lg3-zfJ41dUEZjOotGMFO",{"children":[["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[6114,[],"AsyncMetadata"]
7:["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]
a:null
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
13:I[1701,["943","static/chunks/943-eb5c9570e2ea5452.js","328","static/chunks/328-beff309a0d839380.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f23f643be99b5c74.js"],"default"]
14:I[1999,["943","static/chunks/943-eb5c9570e2ea5452.js","328","static/chunks/328-beff309a0d839380.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f23f643be99b5c74.js"],""]
15:I[1106,["943","static/chunks/943-eb5c9570e2ea5452.js","328","static/chunks/328-beff309a0d839380.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f23f643be99b5c74.js"],"default"]
17:I[4046,["943","static/chunks/943-eb5c9570e2ea5452.js","328","static/chunks/328-beff309a0d839380.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f23f643be99b5c74.js"],""]
16:T3a6f,<blockquote>The average cost of IT downtime is $5,600 per minute.<br><br>~ Gartner</blockquote><p>Downtimes can be costly. During downtimes, a company may face loss of business, loss of customer trust, loss of reputation in the technical and business community, or even all of these together. Downtimes are not fun, and until it happens to us, we all tend to think it cannot happen to us.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-23.png" class="kg-image" alt="" loading="lazy" width="689" height="716"></figure><p>What makes the challenge more difficult is the fact that the world is rapidly incorporating more and more Machine learning on the web, and this has led to complexities that did not exist with non-ML software solutions.</p><p>In this blog, we'll be exploring how to design a machine learning based solution that is highly reliable and does not suffer much when downtimes occur.</p><p>In this 2 part article, we’ll try to find answers to the following questions:</p><ul><li>How quickly can your system bounce back from disasters?</li><li>Are your ML deployments resilient?</li><li>When can you call your system architecture “high availability”?</li></ul><h2 id="part-1undestanding-hadr-systems">Part 1 - Undestanding HADR systems</h2><p>Let us begin by understanding a few basics of High Availability Disaster Recovery (HADR) systems. We'll cover a few key terms and then some common system topologies.</p><h3 id="key-terms-related-to-hadr-systems">Key terms related to HADR systems</h3><p>Key terms that you should know about HADR systems -</p><h4 id="high-availability">High Availability</h4><p>High availability (HA) describes the ability of an application to withstand all planned and unplanned outages (a planned outage could be performing a system upgrade) and to provide continuous processing for business-critical applications.</p><h4 id="disaster-recovery">Disaster Recovery</h4><p>Disaster recovery (DR) involves a set of policies, tools, and procedures for returning a system, an application, or an entire data center to full operation after a catastrophic interruption. It includes procedures for copying and storing an installed system's essential data in a secure location, and for recovering that data to restore normalcy of operation.</p><h4 id="unplanned-downtime">Unplanned downtime</h4><p>Downtime caused by factors which were not introduced on purpose is called unplanned downtime. This can be majorly due to:</p><ul><li>Human Error</li><li>Software Problems</li><li>Hardware Failure</li><li>Environmental Issues</li></ul>
<!--kg-card-begin: html-->
<img loading="lazy" src="https://media.tenor.com/VYujs2dkFTUAAAAC/gopi-bahu.gif" />
<!--kg-card-end: html-->
<h4 id="planned-downtime">Planned downtime</h4><p>The opposite of unplanned downtime.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-24.png" class="kg-image" alt="" loading="lazy" width="344" height="221"></figure><p>Downtimes introduced on purpose, mostly are:</p><ul><li>System upgrades</li><li>System repairs</li><li>Restricted access due to business reasons</li></ul><h4 id="chaos-engineering">Chaos Engineering</h4><p>Chaos engineering is a method of testing distributed software that deliberately introduces failure and faulty scenarios to verify its resilience in the face of random disruptions. These disruptions can cause applications to respond in unpredictable ways and can break under pressure.</p><h4 id="resilience">Resilience</h4><p>The ability of a solution to absorb the impact of a problem in one or more parts of a system, while continuing to provide an acceptable service level to the business customers.</p><h3 id="key-metrics-for-analyzing-your-system-design">Key metrics for analyzing your system design</h3><p>The key metrics used to analyze system designs are -</p><ul><li>Production capacity in and out of region</li><li>Platform availability</li><li>Availability during planned outages</li><li>Failure Impact</li><li>Disaster recovery time</li><li>Incident response time</li></ul><p>Next, let's look at some HADR system topologies, before we compare their metrics.</p><h3 id="a-30000ft-view-of-high-availability-system-design">A 30,000ft view of high availability system design</h3><p>HADR systems can be designed with several topologies ranging from simple ones - where you put all your eggs in a single basket - or complex ones - where you devise a fail-safe array of servers. Let us study a couple of them to understand how such topologies look like -</p><p>Consider the following 2-Active topology -</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-25.png" class="kg-image" alt="" loading="lazy" width="947" height="540"></figure><p>This topology shows that we provision 3 servers such that during normal operations, 2 servers load balance the traffic coming to the application while a third server stays on standby. This server gets activated in the event of failure of any or all of the active servers.</p><p>An alternative to a 2-Active system topology is a 3-Active topology -</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-26.png" class="kg-image" alt="" loading="lazy" width="946" height="552"></figure><p>In this system topology, we provision all three servers as active servers and in event of failure of any server, the other servers load balance the traffic, while the failed servers are brought back up.</p><p>An obvious question here - which of these is better?</p><p>Consider the following chart of metrics comparison for the above two systems against a single Active system -</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-27.png" class="kg-image" alt="" loading="lazy" width="680" height="519"></figure><p>From the above, it can be said that while 3-active systems gives highest availability and lowest failure impacts, if your application is likely to expect surges, a 2-active system might give you better resilience.</p><p>We shall wrap our discussion about HADR system topologies here. Next, we'll talk about challenges posed by ML in HADR systems and see a demo of these topologies in action!</p><h2 id="part-2hadr-system-challenges-by-ml-deployments-and-load-testing-ml-hadr-system">Part 2 - HADR system challenges by ML deployments and load testing ML-HADR system</h2><p>Machine Learning heavy deployments bring their own set of challenges to any HADR system. ML models can be deployed in several ways, due to which it becomes important for architects designing HADR systems to choose the right deployment strategies for best results.</p><h3 id="challenges-posed-to-ml-pipelines-for-high-availability">Challenges posed to ML pipelines for high availability</h3><p>Some of the challenges faced with ML deployments for HADR are -</p><h4 id="what-is-a-good-ml-deployment">What is a good ML deployment?</h4><p>The definition of a good ML deployment changes with who is answering this question. Fir examples -</p><p>Business owners - performs fast inference Researchers - highest accuracy Developers - gets built quickly Q/A engineers - never fails Investors - sounds cool, brings in the $$</p><h4 id="volume-of-data-processed">Volume of data processed</h4><p>Volume of data can be a major challenge to most ML systems. Too much data and you may be running late at your training and too less of it, your inference suffers.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-28.png" class="kg-image" alt="" loading="lazy" width="952" height="343"></figure><h4 id="quality-of-data">Quality of data</h4><p>Data quality refers to how informative and complete a given chunk of data is. The lower the data quality, the tougher it is to derive insights from it.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-29.png" class="kg-image" alt="" loading="lazy" width="747" height="473"></figure><h4 id="model-decay">Model decay</h4><p>The phenomenon in Machine Learning that leads to predictions made by a model become less accurate over time. Primary reasons for model decay are:</p><ul><li>Data drift</li><li>Concept drift</li></ul><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-30.png" class="kg-image" alt="" loading="lazy" width="858" height="527"></figure><h4 id="speed-of-inference-against-various-inputs">Speed of inference against various inputs</h4><p>Speed of inference can change with changing input. If your model performs inference under 1s for most images ranging appx 10MB, what does it do when someone uploads an image of 1GB? Does your system reject the image or does it take down the building?</p><h3 id="load-testing-ml-hadr-systems">Load testing ML-HADR systems</h3><p>Finally, let us load-test a few topologies which server ML based content. To do so, we shall be using the Locus tool along with a self-engineered set of scripts that work as nodes and load balancer.</p><p>I have published the code for this setup here - <a href="https://github.com/xprilion/dummy-topology-loadtest">https://github.com/xprilion/dummy-topology-loadtest</a></p><p>The contents of this system are -</p><ol><li><a href="http://router.py"><code>router.py</code></a> : this file will act as a dummy load-balancer.</li><li><code>predictors/predict**X**.py</code> - these files are numbered, replacing X, and will be active as node servers.</li><li><code>topology/**topology_name**.json</code> - these json files contain information regarding the topologies available. We will be updating the data inside these files while load testing the topology they represent.</li></ol><p>To setup the load test run, first ensure that in the files inside the <code>topology</code> directory, all the topology files are in their initial states, as shown below -</p><h4 id="single-server-system">Single server system</h4><p>In this system, there is a single server handling all resources.</p><pre><code class="language-plaintext">{
    "predict1": {
        "status": true,
        "load": 0,
        "port": "9696"
    }
}
</code></pre><h4 id="2-active-system">2 Active system</h4><p>In this system, initially, there are 2 servers responding to requests. In event of failure of any one or both servers, a third system steps in as replacement while the other two are fixed.</p><pre><code class="language-plaintext">{
    "predict1": {
        "status": true,
        "load": 0,
        "port": "9696"
    },
    "predict2": {
        "status": true,
        "load": 0,
        "port": "9697"
    },
    "predict3": {
        "status": false,
        "load": 0,
        "port": "9698"
    }
}
</code></pre><p>Notice that the <code>status</code> of <code>predict3</code> server is set to <code>false</code>.</p><h4 id="3-active-system">3 Active system</h4><p>In a 3-active system, there are 3 servers available to handle requests.</p><pre><code class="language-plaintext">{
    "predict1": {
        "status": true,
        "load": 0,
        "port": "9696"
    },
    "predict2": {
        "status": true,
        "load": 0,
        "port": "9697"
    },
    "predict3": {
        "status": true,
        "load": 0,
        "port": "9698"
    }
}
</code></pre><p>Then, ensure that in <a href="http://router.py"><code>router.py</code></a>, the <code>topology</code> variable is set to <code>0</code>. This will correspond to the single server system.</p><p>Next, we fire up the Locus UI by running the <code>locust</code> command inside the <code>locust</code> directory.</p><p>Specify the number of users to spawn and the spawn rate. Provide a suitable host. Locust will inform the server under stress that the requests are coming from the specified host.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-31.png" class="kg-image" alt="" loading="lazy" width="1440" height="813"></figure><p>Click on <strong>Start Swarming</strong> to start throwing requests at the server based on the script specified in the <code>locust/</code><a href="http://locustfile.py"><code>locustfile.py</code></a>.</p><p>Observe the charts that show how the system is responding to the increase in the load. After some time, the first server failures start appearing. We'll keep a note of when the first error appears.</p><figure class="kg-card kg-image-card"><img loading="lazy" src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/4ml9m8u/2025/04/image-32.png" class="kg-image" alt="" loading="lazy" width="1440" height="813"></figure><p>Now, change the <code>topology</code> variable in <a href="http://router.py"><code>router.py</code></a> to <code>1</code> and run Locust. In the next step, change the <code>topology</code> variable to <code>2</code> and run Locust again.</p><p>Let's plot a chart of when the first failures happen in case of each system -</p>
<!--kg-card-begin: html-->
<table>
<thead>
<tr>
<th>Topology</th>
<th>RPS at failure</th>
</tr>
</thead>
<tbody>
<tr>
<td>Single</td>
<td>5.2</td>
</tr>
<tr>
<td>2-Active</td>
<td>8.6</td>
</tr>
<tr>
<td>3-Active</td>
<td>7.4</td>
</tr>
</tbody>
</table>
<!--kg-card-end: html-->
<p>As expected, the 2-Active system has the peak capacity in our use-case. However, here's an interesting observation -</p><p>Let us compare the values of the predict servers on 2-Active and 3-Active systems after the load test -</p>
<!--kg-card-begin: html-->
<table>
<thead>
<tr>
<th>Server</th>
<th>2-Active</th>
<th>3-Active</th>
</tr>
</thead>
<tbody>
<tr>
<td>Predict1</td>
<td>10</td>
<td>5</td>
</tr>
<tr>
<td>Predict2</td>
<td>10</td>
<td>7</td>
</tr>
<tr>
<td>Predict3</td>
<td>9</td>
<td>8</td>
</tr>
</tbody>
</table>
<!--kg-card-end: html-->
<p>As we see, the 2-Active system is completely saturated while the 3-Active system is slightly above half its capacity.</p><p>Thus, even though the 2-Active system fails after the 3-Active system has shown its first error, the 3-Active system will saturate later and continue to serve requests for a longer duration.</p><h2 id="conclusion">Conclusion</h2><p>Depending on the HADR system metric you may want to optimize for, you can choose the topology that works best for your use case. You can choose to have multiple replicas of the same network topology or create your own configuration. The scripts provided for load testing can be extended to more topologies. Have fun testing your HADR system designs with it!</p>5:["$","$L13",null,{"children":[["$","div",null,{"className":"mb-6","children":[["$","$L14",null,{"href":"/posts","className":"text-blue-600 hover:underline mb-4 block","children":"← Back to all posts"}],["$","h1",null,{"className":"text-2xl md:text-3xl font-bold mb-2","children":"High Availability ML Deployments"}],["$","p",null,{"className":"text-gray-600 dark:text-gray-200 text-sm ","children":"9 October, 2022"}]]}],null,["$","$L15",null,{"html":"$16","slug":"high-availability-ml-deployments","title":"High Availability ML Deployments"}],["$","$L17",null,{"id":"MathJax-script","src":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.js","async":true,"strategy":"afterInteractive"}],["$","$L17",null,{"id":"MathJax-config","strategy":"beforeInteractive","dangerouslySetInnerHTML":{"__html":"\n          MathJax = {\n            tex: {\n              inlineMath: [['((', '))']],\n              displayMath: [['[[', ']]']],\n            },\n            svg: {\n              fontCache: 'global'\n            }\n          };\n        "}}]]}]
12:{"metadata":[["$","title","0",{"children":"High Availability ML Deployments"}],["$","meta","1",{"name":"description","content":"The average cost of IT downtime is $5,600 per minute.\n\n~ Gartner\n\nDowntimes can be costly. During downtimes, a company may face loss of business, loss of customer trust, loss of reputation in the technical and business community, or even all of these together. Downtimes are not fun, and until it happens to us, we all tend to think it cannot happen to us.\n\nWhat makes the challenge more difficult is the fact that the world is rapidly incorporating more and more Machine learning on the web, and thi"}]],"error":null,"digest":"$undefined"}
c:{"metadata":"$12:metadata","error":null,"digest":"$undefined"}
