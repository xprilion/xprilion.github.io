{"version":3,"file":"component---src-templates-codelabs-codelab-tsx-f765cce7625b0df6adbf.js","mappings":"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","sources":["webpack://gatsbyblog/./src/components/signup-form.tsx","webpack://gatsbyblog/./src/components/codelabs/navigation.tsx","webpack://gatsbyblog/./src/components/codelabs/content.tsx","webpack://gatsbyblog/./src/components/codelabs/interface.tsx","webpack://gatsbyblog/./src/components/codelabs/layout.tsx","webpack://gatsbyblog/./src/templates/codelabs/codelab.tsx","webpack://gatsbyblog/./src/utils/mathjs.ts","webpack://gatsbyblog/./node_modules/react-cusdis/dist/ReactCusdis.js","webpack://gatsbyblog/./node_modules/react-cusdis/dist/useScript.js"],"sourcesContent":["import React from 'react'\nimport '../styles/signup-form.css'\n\nexport const SignupForm = () => {\n    const handleSubmit = () => {\n        window.open(\n            'https://newsletter.xprilion.com/subscription/form',\n            'popupwindow',\n            'scrollbars=yes,width=800,height=600'\n        )\n        return true\n    }\n\n    return (\n        <form\n            action={'https://newsletter.xprilion.com/subscription/form'}\n            method=\"post\"\n            target=\"popupwindow\"\n            onSubmit={handleSubmit}\n            className=\"SignupForm\"\n        >\n            <h3>Subscribe to my newsletter</h3>\n            <i>I often write about my experiences, sometimes tech, sometimes life</i>\n            <br />\n            <div className=\"flex flex-col md:flex-row overflow-hidden\">\n                <input\n                    className={\"mb-2 md:m-0\"}\n                    aria-label=\"Email address\"\n                    placeholder=\"john@example.com\"\n                    name=\"email\"\n                    type=\"email\"\n                    required\n                    id=\"tlemail\"\n                />\n                <input\n                    className={\"mb-2 md:ml-2 md:mb-0 md:mr-2\"}\n                    aria-label=\"Your name\"\n                    placeholder=\"John Doe\"\n                    name=\"name\"\n                    type=\"text\"\n                    required\n                    id=\"tlname\"\n                />\n                <input\n                    id=\"l-69f4cf24-c231-434c-be19-6d8899d60fbf\"\n                    type=\"hidden\"\n                    name=\"l\"\n                    value=\"69f4cf24-c231-434c-be19-6d8899d60fbf\"\n                />\n                <button type=\"submit\">Subscribe</button>\n            </div>\n        </form>\n    )\n}","import React, { useState } from 'react';\nimport { Section } from '../../utils/codelabs';\n\ntype NavigationProps = {\n    sections: Section[];\n    activeSectionId: string;\n    onSetActiveSectionId: (id: string) => void;\n};\n\nconst Navigation: React.FC<NavigationProps> = ({ sections, activeSectionId, onSetActiveSectionId }) => {\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const activeSectionIndex = sections.findIndex(section => section.id === activeSectionId);\n    const activeSection = sections.find(section => section.id === activeSectionId);\n\n\n    return (\n        <aside className={\"mb-4 md:mb-0\"}>\n            {/* Dropdown for small screens */}\n            <div className=\"md:hidden\">\n                <button\n                    onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n                    className=\"flex justify-between items-center px-4 py-2 font-medium text-left w-full bg-gray-100 rounded-md\"\n                >\n                    <span>{activeSection ? activeSection.title : 'Select a Section'}</span>\n                    <span className={`transform transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`}>â–¼</span>\n                </button>\n                {isDropdownOpen && (\n                    <ul className=\"list-none p-0 mt-2 bg-gray-100 rounded-md\">\n                        {sections.map((section, index) => (\n                            <li key={'sc30-'+section.id} className=\"rounded-md\">\n                                <button\n                                    onClick={() => {\n                                        onSetActiveSectionId(section.id);\n                                        setIsDropdownOpen(false);\n                                    }}\n                                    className={`block text-left w-full px-3 py-2 font-medium truncate rounded-md transition-colors ${activeSectionId === section.id ? 'bg-black text-white' : 'hover:bg-gray-50'}`}\n                                >\n                                    {index + 1}. {section.title}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n\n            {/* Regular sidebar for medium and larger screens */}\n            <div className=\"hidden md:block lg:w-72 bg-gray-100 p-4 overflow-y-auto\">\n                <ul className=\"list-none p-0\">\n                    {sections.map((section, index) => (\n                        <li key={'sc40-'+section.id} className=\"rounded-md\">\n                            <button\n                                onClick={() => onSetActiveSectionId(section.id)}\n                                className={`block text-left w-full px-3 py-2 font-medium rounded-md transition-colors ${activeSectionId === section.id ? 'bg-black text-white hover:bg-gray-800' : 'hover:bg-gray-300'} ${index < activeSectionIndex ? 'bg-gray-700 text-gray-300 hover:bg-gray-800' : ''}`}\n                            >\n                                {index + 1}. {section.title}\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </aside>\n    );\n};\n\nexport default Navigation;\n","// components/Content.tsx\nimport React from 'react';\nimport {Section} from \"../../utils/codelabs\";\n\ntype ContentProps = {\n    sections: Section[];\n    activeSectionId: string;\n    onNavigateSection: (direction: 'prev' | 'next') => void;\n    upperContent?: any;\n    bottomContent: any;\n};\n\nconst Content: React.FC<ContentProps> = ({ sections, activeSectionId, onNavigateSection, upperContent, bottomContent }) => {\n    const activeSectionIndex = sections.findIndex(section => section.id === activeSectionId);\n\n    return (\n        <main className=\"bg-gray-50 flex-1 p-1 md:p-5 pt-0 w-full\">\n            <div className=\"w-full\">\n                {sections.map((section) => {\n                    if (section.id === activeSectionId) {\n                        return (\n                            <div key={'sectiondiv-'+section.id}>\n                                <div key={section.id} className=\"bg-white shadow-lg rounded p-6 mb-4 w-full min-h-[500px]\">\n                                    <div className={\"flex flex-row align-middle justify-between\"}>\n                                        <h2 className=\"m-0 mb-4\">{section.title}</h2>\n                                        <div className=\"text-right text-sm text-gray-500\">{section.duration} mins</div>\n                                    </div>\n                                    <div className=\"content-section\">{section.content}</div>\n                                </div>\n                                <div className=\"flex justify-between mt-4\">\n                                    {activeSectionIndex > 0 ? (\n                                        <button\n                                            onClick={() => onNavigateSection('prev')}\n                                            className=\"bg-gray-700 text-white px-4 py-2 rounded shadow hover:bg-gray-900\"\n                                        >\n                                            Previous\n                                        </button>\n                                    ) : <>&nbsp;</>}\n                                    {activeSectionIndex < sections.length - 1 && (\n                                        <button\n                                            onClick={() => onNavigateSection('next')}\n                                            className=\"bg-gray-700 text-white px-4 py-2 rounded shadow hover:bg-gray-900\"\n                                        >\n                                            Next\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    }\n                })}\n                {bottomContent}\n            </div>\n\n        </main>\n    );\n};\n\nexport default Content;\n","import React, {useEffect} from 'react';\nimport { parseCodelabHtml } from '../../utils/codelabs';\nimport Navigation from './navigation';\nimport Content from './content';\nimport Prism from 'prismjs';\nimport Header from \"../header\";\nimport Footer from \"../footer\";\n\n\ntype CodelabInterfaceProps = {\n    htmlContent: string;\n    upperContent: any;\n    bottomContent: any;\n};\n\nconst CodelabInterface: React.FC<CodelabInterfaceProps> = ({ htmlContent, upperContent, bottomContent }) => {\n    const sections = parseCodelabHtml(htmlContent);\n    const firstSectionId = sections.length > 0 ? sections[0].id : '';\n\n    // Use state to manage the active section\n    const [activeSectionId, setActiveSectionId] = React.useState<string>(firstSectionId);\n\n    // Function to navigate to the previous or next section\n    const navigateSection = (direction: 'prev' | 'next') => {\n        const currentSectionIndex = sections.findIndex((section) => section.id === activeSectionId);\n        const newSectionIndex = direction === 'prev' ? currentSectionIndex - 1 : currentSectionIndex + 1;\n        if (sections[newSectionIndex]) {\n            setActiveSectionId(sections[newSectionIndex].id);\n        }\n    };\n\n    useEffect(() => {\n        Prism.highlightAll();\n    }, [activeSectionId]);\n\n    return (\n        <>\n            <div className=\"flex flex-col md:flex-row w-full\">\n                <Navigation\n                    sections={sections}\n                    activeSectionId={activeSectionId}\n                    onSetActiveSectionId={setActiveSectionId}\n                />\n                <div className=\"flex flex-col h-screen mx-auto w-full\">\n                    <div className={\"max-w-[800px]\"}>\n                        <Content\n                            sections={sections}\n                            activeSectionId={activeSectionId}\n                            onNavigateSection={navigateSection}\n                            bottomContent={bottomContent}\n                        />\n                        <br/>\n                        <hr className={\"hr-full\"}/>\n                        <Footer/>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default CodelabInterface;\n","import React, { ReactNode } from \"react\";\nimport \"../../styles/global.css\";\n// import \"../../styles/generic.css\";\n\n\ntype LayoutProps = {\n        children: ReactNode;\n};\n\nexport const Head = () => (\n    <>\n        <html lang=\"en\" />\n        <title>\n                Anubhav Singh | xprilion&apos;s blog\n        </title>\n        <link rel=\"icon\" href={\"/favicon.ico\"} />\n        <link rel=\"shortcut icon\" type=\"image/x-icon\" href={\"/favicon.ico\"} />\n        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={\"/favicon.png\"} />\n        <meta name=\"theme-color\" content=\"#7b46f6\" />\n\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n        <meta itemProp=\"name\" content=\"xprilion's blog\" />\n        <meta itemProp=\"description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta itemProp=\"image\" content={\"/favicon.png\"} />\n        <meta name=\"description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta property=\"og:title\" content={\"xprilion's blog\"} />\n        <meta property=\"og:description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta property=\"og:image\" content={\"/favicon.png\"}/>\n        <meta property=\"og:type\" content=\"website\" />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"@xprilion\" />\n        <meta name=\"twitter:creator\" content=\"@xprilion\" />\n        <meta name=\"twitter:title\" content={\"xprilion's blog\"} />\n        <meta name=\"twitter:description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta name=\"twitter:image\" content={\"/favicon.png\"} />\n    </>\n)\n\nconst CodelabLayout: React.FC<LayoutProps> = ({ children }) => {\n    return (\n        <div className={\"px-4\"}>\n            {children}\n        </div>\n    );\n};\n\nexport default CodelabLayout;\n","import React, {useEffect, useState} from \"react\";\nimport Prism from 'prismjs';\nimport {formatDate} from \"../../utils/date\";\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-bash.min.js';\nimport 'prismjs/components/prism-typescript.min.js';\nimport 'prismjs/components/prism-javascript.min.js';\nimport 'prismjs/components/prism-json.min.js';\nimport 'prismjs/components/prism-python.min.js';\nimport 'prismjs/components/prism-go.min.js';\nimport {ReactCusdis} from \"react-cusdis\";\nimport {SignupForm} from \"../../components/signup-form\";\nimport CodelabInterface from '../../components/codelabs/interface';\nimport CodelabLayout from \"../../components/codelabs/layout\";\nimport {Helmet} from \"react-helmet\";\nimport Header from \"../../components/header\";\nimport { adjustDelimiters } from \"../../utils/mathjs\";\nimport { PageData, SEO } from \"../../components/seo\";\n\n\nexport const Head = ({pageContext}: PostProps) => <SEO pageData={pageContext.node as PageData} />\n\n\nconst Post = ({pageContext}: PostProps) => {\n    const {id, title, subtitle, url, publishedAt, coverImage,  content, seo} = pageContext.node\n\n    useEffect(() => {\n          Prism.highlightAll();\n          //@ts-ignore\n          if (window.MathJax) {\n            //@ts-ignore\n            window.MathJax.typeset()\n          }\n      }, [content]);\n\n    return (\n        <CodelabLayout>\n            <Header closeBtn={true} title={`${title.replace(\"Page::\", \"\")} | xprilion's blog`} />\n            <hr className={\"hr-full\"}/>\n             <CodelabInterface htmlContent={adjustDelimiters(content.html)}\n               upperContent = {\n                    <>\n                        <h1>{title.replace(\"Codelab::\", \"\")}</h1>\n                        <p style={{marginTop: \"-1rem\"}}><small>{formatDate(publishedAt)}</small></p>\n                        {coverImage && <img src={coverImage.url} alt={title}/>}\n                    </>\n                }\n               bottomContent={\n                <>\n                    <br/>\n                    <SignupForm/>\n                    <br/>\n                    {\n                        <ReactCusdis\n                            attrs={{\n                                host: 'https://cusdis.com',\n                                appId: 'e9bc0bcb-d463-4f63-8604-34e78a1ec232',\n                                pageId: id,\n                                pageTitle: title,\n                                pageUrl: url\n                            }}\n                        />\n                    }\n                </>\n            } />\n        </CodelabLayout>\n    );\n};\n\nexport default Post;\n","export function adjustDelimiters(htmlContent: any) {\n    const inlineAdjusted = htmlContent.replace(/\\\\?\\(\\((.*?)\\\\?\\)\\)/g, '(( $1 ))');\n    const displayAdjusted = inlineAdjusted.replace(/\\\\?\\[\\[\\s*(.*?)\\s*\\\\?\\]\\]/g, '[[ $1 ]]');\n    return displayAdjusted;\n  }","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactCusdis = void 0;\nconst React = require(\"react\");\nconst useScript_1 = require(\"./useScript\");\nfunction ReactCusdis(props) {\n    const divRef = React.useRef(null);\n    const host = props.attrs.host || 'https://cusdis.com';\n    useScript_1.useScript(`${host}/js/cusdis.es.js`);\n    useScript_1.useScript(props.lang ? `${host}/js/widget/lang/${props.lang}.js` : '');\n    React.useLayoutEffect(() => {\n        // @ts-expect-error\n        const render = window.renderCusdis;\n        if (render) {\n            render(divRef.current);\n        }\n    }, [\n        props.attrs.appId,\n        props.attrs.host,\n        props.attrs.pageId,\n        props.attrs.pageTitle,\n        props.attrs.pageUrl,\n        props.lang\n    ]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { id: \"cusdis_thread\", \"data-host\": host, \"data-page-id\": props.attrs.pageId, \"data-app-id\": props.attrs.appId, \"data-page-title\": props.attrs.pageTitle, \"data-page-url\": props.attrs.pageUrl, \"data-theme\": props.attrs.theme, style: props.style, ref: divRef })));\n}\nexports.ReactCusdis = ReactCusdis;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useScript = void 0;\nconst React = require(\"react\");\nfunction useScript(src) {\n    // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n    const [status, setStatus] = React.useState(src ? \"loading\" : \"idle\");\n    React.useEffect(() => {\n        // Allow falsy src value if waiting on other data needed for\n        // constructing the script URL passed to this hook.\n        if (!src) {\n            setStatus(\"idle\");\n            return;\n        }\n        // Fetch existing script element by src\n        // It may have been added by another intance of this hook\n        let script = document.querySelector(`script[src=\"${src}\"]`);\n        if (!script) {\n            // Create script\n            script = document.createElement(\"script\");\n            script.src = src;\n            script.async = true;\n            script.setAttribute(\"data-status\", \"loading\");\n            // Add script to document body\n            document.body.appendChild(script);\n            // Store status in attribute on script\n            // This can be read by other instances of this hook\n            const setAttributeFromEvent = (event) => {\n                script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n            };\n            script.addEventListener(\"load\", setAttributeFromEvent);\n            script.addEventListener(\"error\", setAttributeFromEvent);\n        }\n        else {\n            // Grab existing script status from attribute and set to state.\n            // @ts-expect-error\n            setStatus(script.getAttribute(\"data-status\"));\n        }\n        // Script event handler to update status in state\n        // Note: Even if the script already exists we still need to add\n        // event handlers to update the state for *this* hook instance.\n        const setStateFromEvent = (event) => {\n            setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n        };\n        // Add event listeners\n        script.addEventListener(\"load\", setStateFromEvent);\n        script.addEventListener(\"error\", setStateFromEvent);\n        // Remove event listeners on cleanup\n        return () => {\n            if (script) {\n                script.removeEventListener(\"load\", setStateFromEvent);\n                script.removeEventListener(\"error\", setStateFromEvent);\n            }\n        };\n    }, [src] // Only re-run effect if script src changes\n    );\n    return status;\n}\nexports.useScript = useScript;\n"],"names":["SignupForm","React","action","method","target","onSubmit","handleSubmit","window","open","className","placeholder","name","type","required","id","value","_ref","sections","activeSectionId","onSetActiveSectionId","isDropdownOpen","setIsDropdownOpen","useState","activeSectionIndex","findIndex","section","activeSection","find","onClick","title","map","index","key","onNavigateSection","upperContent","bottomContent","duration","content","length","htmlContent","parseCodelabHtml","firstSectionId","setActiveSectionId","useEffect","Prism","Navigation","Content","direction","currentSectionIndex","newSectionIndex","Footer","children","Head","pageContext","SEO","pageData","node","_ref2","subtitle","url","publishedAt","coverImage","seo","MathJax","typeset","CodelabLayout","Header","closeBtn","replace","CodelabInterface","html","style","marginTop","formatDate","src","alt","ReactCusdis","attrs","host","appId","pageId","pageTitle","pageUrl","exports","useScript_1","props","divRef","useRef","useScript","lang","useLayoutEffect","render","renderCusdis","current","createElement","Fragment","theme","ref","Object","defineProperty","status","setStatus","script","document","querySelector","getAttribute","async","setAttribute","body","appendChild","setAttributeFromEvent","event","addEventListener","setStateFromEvent","removeEventListener"],"sourceRoot":""}