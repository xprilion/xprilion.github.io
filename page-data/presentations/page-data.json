{"componentChunkName":"component---src-templates-presentations-index-tsx","path":"/presentations/","result":{"pageContext":{"presentations":[{"node":{"id":"65c87ed66bca40ae7db601f3","slug":"build-a-google-gemini-pro-store-with-google-sheets","url":"https://xprilion.com/build-a-google-gemini-pro-store-with-google-sheets","title":"Build a Gemini Store with Google Sheets","featured":false,"subtitle":"Giving personalities to your Gemini APIs via Gemini Store in Google Sheets","brief":"Overview\nDuration: 1\nHave you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you c...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/GLg0z5z8EQU/upload/fa2ab8a93c2bfbf4eb1abe5d5b261f9f.jpeg"},"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Have you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you can now have a super smart AI assistant do the grind work for you!</p>\n<p>In this article, we'll cover a very simple way of giving personalities or specific roles to your Gemini powered API calls via the simple and popular interface of Google Sheets!</p>\n<p>Here's a screen recording of what we're building:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://youtu.be/KqUNS9WoMkQ\">https://youtu.be/KqUNS9WoMkQ</a></div>\n<p> </p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>Access to a Google Account</p>\n</li>\n<li><p>Access to Google's Gemini Pro APIs via Google AI Studio</p>\n</li>\n</ol>\n<h2 id=\"heading-architecture\">Architecture</h2>\n<p>Duration: 2</p>\n<p>We'll be building our product's architecture in the following manner:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707635641736/de16e03a-935f-4081-b616-c81b5fe4b520.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The Google Sheets will interact on every edit operation with the associated Apps Script for that Sheet which in turn talks to the Gemini Pro API. We'll be using the Gemini Pro API via the Google AI Studio in order to get some free API calls at the cost of being non-production ready. However, you can use Gemini Pro APIs via Vertex AI for production workloads.</p>\n<h2 id=\"heading-get-the-gemini-api-key\">Get the Gemini API Key</h2>\n<p>Duration: 3</p>\n<p>Now, let's get an API Key to access the Gemini Pro APIs.</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://makersuite.google.com/\">Google AI Studio</a></p>\n</li>\n<li><p>Click on <a target=\"_blank\" href=\"https://makersuite.google.com/app/apikey\">Get API Key</a></p>\n</li>\n<li><p>Follow the steps provided on the page to generate an API Key. Store the key safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setup-your-google-sheet\">Setup your Google Sheet</h2>\n<p>Duration: 5</p>\n<p>Let us setup your Google Sheet to work like a Gemini Store. To do so, we'll create a second sheet in the default Google Sheet document titled \"Geminis\".</p>\n<p>Fill the following data in this sheet (only for example, you can change as per your wish):</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>name</td><td>sys prompt</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Pilot Gemini</td><td>Drawing on your extensive experience as a seasoned pilot, how would you explain or advise on the following aviation-related query? Use a lot of Pilot terms!</td></tr>\n<tr>\n<td>Pirate Gemini</td><td>As a legendary pirate who has sailed the seven seas, how would you respond to this inquiry with your adventurous spirit and nautical knowledge? Reply in pirate language only.</td></tr>\n<tr>\n<td>Techie Gemini</td><td>As a tech enthusiast with a passion for the latest gadgets and innovations, how would you explain or solve this technology-related problem? Use techie terms!</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-setup-your-apps-script\">Setup your Apps Script</h2>\n<p>Duration: 3</p>\n<p>We will now create the AppScript code to interface between Google Sheets and the Gemini Pro API.</p>\n<ol>\n<li><p>Create a new Google Sheet and create the following columns in it: <code>GeminiName</code>, <code>Query</code>, <code>Response</code>.</p>\n</li>\n<li><p>In your Google Sheet, Click on <code>Extensions &gt; Apps Script</code></p>\n</li>\n<li><p>We'll be editing the <code>Code.gs</code> file. Remove the current contents of this file and head to the next step!</p>\n</li>\n</ol>\n<h2 id=\"heading-listen-to-onedit-changes-to-the-sheet\">Listen to onEdit changes to the sheet</h2>\n<p>Duration: 3</p>\n<p>In your <code>Code.gs</code> file, add the following function which listens to each edit on the Google Sheet and decides if it needs to perform any action on it.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onEdit</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> formResponsesSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Sheet1'</span>); <span class=\"hljs-comment\">// Use getSheetByName for clarity</span>\n  <span class=\"hljs-keyword\">var</span> editedRow = e.range.getRow();\n\n  <span class=\"hljs-comment\">// Avoid running on header row or rows beyond the last content row</span>\n  <span class=\"hljs-keyword\">if</span> (editedRow === <span class=\"hljs-number\">1</span> || editedRow &gt; formResponsesSheet.getLastRow()) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if the edit is in the header or beyond the last content row</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> rowData = formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>).getValues()[<span class=\"hljs-number\">0</span>];\n\n  <span class=\"hljs-comment\">// Check if all required columns are filled (columns 1 to 7, excluding 'Response')</span>\n  <span class=\"hljs-keyword\">if</span> (!rowData.every(isColumnFilled)) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if not all required fields are filled</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> chosenGemini = rowData[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 'Choose your Gemini' is the third column</span>\n  <span class=\"hljs-keyword\">var</span> userQuestion = rowData[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 'Say/Ask something' is the fourth column</span>\n\n  <span class=\"hljs-keyword\">var</span> geminisSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Geminis'</span>);\n  <span class=\"hljs-keyword\">var</span> geminiData = geminisSheet.getRange(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, geminisSheet.getLastRow() - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>).getValues();\n\n  <span class=\"hljs-keyword\">var</span> systemPrompt = findSystemPrompt(geminiData, chosenGemini, userQuestion);\n\n  <span class=\"hljs-keyword\">if</span> (systemPrompt) {\n    <span class=\"hljs-keyword\">var</span> apiResponse = callApi(systemPrompt);\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(apiResponse); <span class=\"hljs-comment\">// Assuming 'Response' is in the 8th column</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(<span class=\"hljs-string\">\"Error: Gemini not found or other error occurred.\"</span>);\n  }\n}\n</code></pre>\n<h2 id=\"heading-create-helper-functions\">Create Helper functions</h2>\n<p>Duration: 3</p>\n<p>Now, let's setup two helper functions to work with the script. The <code>isColumnFilled</code> function checks if that row is full before trying to hit the Gemini API. The <code>findSystemPrompt</code> function loads the system prompt we defined in the Geminis sheet corresponding the Gemini name chosen by the user in the row.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Helper function to check if a column is filled</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isColumnFilled</span>(<span class=\"hljs-params\">content</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> content !== <span class=\"hljs-literal\">null</span> &amp;&amp; content !== <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// Checks if content is not null and not an empty string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findSystemPrompt</span>(<span class=\"hljs-params\">geminiData, chosenGemini, userQuestion</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; geminiData.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (geminiData[i][<span class=\"hljs-number\">0</span>] === chosenGemini) {\n      <span class=\"hljs-keyword\">return</span> geminiData[i][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">\" Max 50 words. Keep it funny and light-hearted. \"</span> + <span class=\"hljs-string\">\" \\n User: \"</span> + userQuestion + <span class=\"hljs-string\">\" \\n Answer: \"</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Return null if no matching Gemini is found</span>\n}\n</code></pre>\n<h2 id=\"heading-call-gemini-pro-api\">Call Gemini Pro API</h2>\n<p>Duration: 3</p>\n<p>Finally, we'll create the <code>callApi</code> function which makes the call to Gemini Pro API and sets the output in the sheet.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callApi</span>(<span class=\"hljs-params\">prompt</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY'</span>; <span class=\"hljs-comment\">// Replace with your actual API Key</span>\n  <span class=\"hljs-keyword\">var</span> payload = {<span class=\"hljs-string\">\"contents\"</span>:[{<span class=\"hljs-string\">\"parts\"</span>:[{<span class=\"hljs-string\">\"text\"</span>: prompt}]}]};\n  <span class=\"hljs-keyword\">var</span> options = {\n    <span class=\"hljs-string\">\"method\"</span> : <span class=\"hljs-string\">\"post\"</span>,\n    <span class=\"hljs-string\">\"contentType\"</span>: <span class=\"hljs-string\">\"application/json\"</span>,\n    <span class=\"hljs-string\">\"payload\"</span> : <span class=\"hljs-built_in\">JSON</span>.stringify(payload)\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">var</span> response = UrlFetchApp.fetch(url, options);\n    <span class=\"hljs-keyword\">var</span> jsonResponse = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n    <span class=\"hljs-keyword\">return</span> jsonResponse.candidates[<span class=\"hljs-number\">0</span>].content.parts[<span class=\"hljs-number\">0</span>].text;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"API call failed: \"</span> + error.toString();\n  }\n}\n</code></pre>\n<h2 id=\"heading-setup-onedit-trigger\">Setup onEdit trigger</h2>\n<p>Duration: 3</p>\n<p>As a final step, you will have to setup the onEdit trigger to execute every time edits are made to your Google Sheet. Click on the \"clock\" icon on the Apps Script interface to access the triggers section for your Apps Script.</p>\n<p>Add a trigger with the configuration as shown below and click on Save.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707638180473/f6bea87a-0392-42c0-b8c6-35919fbd2a53.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-test-the-integration\">Test the integration</h2>\n<p>Duration: 2</p>\n<p>Now, create a new row in the sheet to test if everything works alright! If all goes well, you should see the Gemini response according to your chosen Gemini in the Response column!</p>\n"},"publishedAt":"2024-02-11T08:01:26.737Z","seo":{"title":null,"description":null},"tags":[{"slug":"blog"},{"slug":"codelab"},{"slug":"ppt"}]}},{"node":{"id":"65b8b32916500e7a28699d61","slug":"test-ppt","url":"https://xprilion.com/test-ppt","title":"Presentation::Test ppt","featured":false,"subtitle":null,"brief":"Overview\nDuration: 1\nHey there!\nThis codelab will walffffffk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.\nRequirements\nDuration: 2\nIn order to follow this codelab, you...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>This codelab will walffffffk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account.</p>\n</li>\n<li><p>Google Cloud CLI installed and initialized.</p>\n</li>\n<li><p>Python installed locally.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-account\">Setting Up Your Google Cloud Account</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> and create an account.</p>\n</li>\n<li><p>Enable billing</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n</ol>\n<h2 id=\"heading-install-google-cloud-cli\">Install Google Cloud CLI</h2>\n<p>Duration: 5</p>\n<p>Follow the official guide to install the Google Cloud CLI: <a target=\"_blank\" href=\"https://cloud.google.com/sdk/docs/install\">Installing Google Cloud SDK</a>.</p>\n<h2 id=\"heading-create-and-run-the-flask-application\">Create and Run the Flask Application</h2>\n<p>Duration: 15</p>\n<ol>\n<li><p>Set up a new directory for your project:</p>\n<pre><code class=\"lang-bash\"> mkdir hello-world-cloud-run\n <span class=\"hljs-built_in\">cd</span> hello-world-cloud-run\n</code></pre>\n</li>\n<li><p>Create a Python virtual environment and activate it:</p>\n<pre><code class=\"lang-bash\"> python3 -m venv .venv\n <span class=\"hljs-built_in\">source</span> .venv/bin/activate\n</code></pre>\n</li>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Create a file named <a target=\"_blank\" href=\"http://main.py\"><code>main.py</code></a> with the following content:</p>\n<pre><code class=\"lang-python\"> <span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n <span class=\"hljs-keyword\">import</span> os\n\n app = Flask(__name__)\n\n<span class=\"hljs-meta\"> @app.route('/')</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n <span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n     app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-running-the-app-locally\">Running the App Locally</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application locally:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see the \"Hello, World!\" message.</p>\n</li>\n</ol>\n<h2 id=\"heading-deploy-to-google-cloud-run\">Deploy to Google Cloud Run</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Generate the requirements.txt file</p>\n<pre><code class=\"lang-bash\"> pip list --format=freeze &gt; requirements.txt\n</code></pre>\n</li>\n<li><p>Deploy your application to Google Cloud Run:</p>\n<pre><code class=\"lang-bash\"> gcloud run deploy\n</code></pre>\n</li>\n<li><p>Wait for the deployment to complete. You will receive a URL where your application is live.</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple application on Google Cloud Run using Python and Flask!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with adding more routes and functionalities to your Flask application.</p>\n</li>\n<li><p>Learn more about managing and monitoring your applications on Google Cloud Run.</p>\n</li>\n<li><p>Explore other Google Cloud services that can enhance your application.</p>\n</li>\n</ul>\n"},"publishedAt":"2024-01-30T08:28:25.768Z","seo":{"title":null,"description":null},"tags":[{"slug":"ppt"}]}},{"node":{"id":"6571da74cabbbca2f1bf829e","slug":"high-availability-ml-deployments","url":"https://xprilion.com/high-availability-ml-deployments","title":"High Availability ML Deployments","featured":false,"subtitle":null,"brief":"The average cost of IT downtime is $5,600 per minute.\n~ Gartner\n\nDowntimes can be costly. During downtimes, a company may face loss of business, loss of customer trust, loss of reputation in the technical and business community, or even all of these ...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960031697/d3227ce0-d061-43db-a517-a27f364666b8.png"},"content":{"html":"<blockquote>\n<p>The average cost of IT downtime is $5,600 per minute.</p>\n<p>~ Gartner</p>\n</blockquote>\n<p>Downtimes can be costly. During downtimes, a company may face loss of business, loss of customer trust, loss of reputation in the technical and business community, or even all of these together. Downtimes are not fun, and until it happens to us, we all tend to think it cannot happen to us.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960112859/5ef3fcf5-6c79-4b1b-b2d5-a62dab91504c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>What makes the challenge more difficult is the fact that the world is rapidly incorporating more and more Machine learning on the web, and this has led to complexities that did not exist with non-ML software solutions.</p>\n<p>In this blog, we'll be exploring how to design a machine learning based solution that is highly reliable and does not suffer much when downtimes occur.</p>\n<p>In this 2 part article, we’ll try to find answers to the following questions:</p>\n<ul>\n<li><p>How quickly can your system bounce back from disasters?</p>\n</li>\n<li><p>Are your ML deployments resilient?</p>\n</li>\n<li><p>When can you call your system architecture “high availability”?</p>\n</li>\n</ul>\n<h2 id=\"heading-part-1-undestanding-hadr-systems\">Part 1 - Undestanding HADR systems</h2>\n<p>Let us begin by understanding a few basics of High Availability Disaster Recovery (HADR) systems. We'll cover a few key terms and then some common system topologies.</p>\n<h3 id=\"heading-key-terms-related-to-hadr-systems\">Key terms related to HADR systems</h3>\n<p>Key terms that you should know about HADR systems -</p>\n<h4 id=\"heading-high-availability\">High Availability</h4>\n<p>High availability (HA) describes the ability of an application to withstand all planned and unplanned outages (a planned outage could be performing a system upgrade) and to provide continuous processing for business-critical applications.</p>\n<h4 id=\"heading-disaster-recovery\">Disaster Recovery</h4>\n<p>Disaster recovery (DR) involves a set of policies, tools, and procedures for returning a system, an application, or an entire data center to full operation after a catastrophic interruption. It includes procedures for copying and storing an installed system's essential data in a secure location, and for recovering that data to restore normalcy of operation.</p>\n<h4 id=\"heading-unplanned-downtime\">Unplanned downtime</h4>\n<p>Downtime caused by factors which were not introduced on purpose is called unplanned downtime. This can be majorly due to:</p>\n<ul>\n<li><p>Human Error</p>\n</li>\n<li><p>Software Problems</p>\n</li>\n<li><p>Hardware Failure</p>\n</li>\n<li><p>Environmental Issues</p>\n</li>\n</ul>\n<p><img src=\"https://media.tenor.com/VYujs2dkFTUAAAAC/gopi-bahu.gif\" alt=\"Unplanned downtime meme\" /></p>\n<h4 id=\"heading-planned-downtime\">Planned downtime</h4>\n<p>The opposite of unplanned downtime.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960127488/0c6eef40-e655-4d53-b6f5-f231a61ca373.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Downtimes introduced on purpose, mostly are:</p>\n<ul>\n<li><p>System upgrades</p>\n</li>\n<li><p>System repairs</p>\n</li>\n<li><p>Restricted access due to business reasons</p>\n</li>\n</ul>\n<h4 id=\"heading-chaos-engineering\">Chaos Engineering</h4>\n<p>Chaos engineering is a method of testing distributed software that deliberately introduces failure and faulty scenarios to verify its resilience in the face of random disruptions. These disruptions can cause applications to respond in unpredictable ways and can break under pressure.</p>\n<h4 id=\"heading-resilience\">Resilience</h4>\n<p>The ability of a solution to absorb the impact of a problem in one or more parts of a system, while continuing to provide an acceptable service level to the business customers.</p>\n<h3 id=\"heading-key-metrics-for-analyzing-your-system-design\">Key metrics for analyzing your system design</h3>\n<p>The key metrics used to analyze system designs are -</p>\n<ul>\n<li><p>Production capacity in and out of region</p>\n</li>\n<li><p>Platform availability</p>\n</li>\n<li><p>Availability during planned outages</p>\n</li>\n<li><p>Failure Impact</p>\n</li>\n<li><p>Disaster recovery time</p>\n</li>\n<li><p>Incident response time</p>\n</li>\n</ul>\n<p>Next, let's look at some HADR system topologies, before we compare their metrics.</p>\n<h3 id=\"heading-a-30000ft-view-of-high-availability-system-design\">A 30,000ft view of high availability system design</h3>\n<p>HADR systems can be designed with several topologies ranging from simple ones - where you put all your eggs in a single basket - or complex ones - where you devise a fail-safe array of servers. Let us study a couple of them to understand how such topologies look like -</p>\n<p>Consider the following 2-Active topology -</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960139543/0172d1c1-0563-4fa8-9fec-69ddbe54ea48.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This topology shows that we provision 3 servers such that during normal operations, 2 servers load balance the traffic coming to the application while a third server stays on standby. This server gets activated in the event of failure of any or all of the active servers.</p>\n<p>An alternative to a 2-Active system topology is a 3-Active topology -</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960155075/11f765cb-afec-4340-bd52-7cc5038f7615.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In this system topology, we provision all three servers as active servers and in event of failure of any server, the other servers load balance the traffic, while the failed servers are brought back up.</p>\n<p>An obvious question here - which of these is better?</p>\n<p>Consider the following chart of metrics comparison for the above two systems against a single Active system -</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960165457/4a97d05e-a089-49de-9bbb-5d5baac74de1.png\" alt class=\"image--center mx-auto\" /></p>\n<p>From the above, it can be said that while 3-active systems gives highest availability and lowest failure impacts, if your application is likely to expect surges, a 2-active system might give you better resilience.</p>\n<p>We shall wrap our discussion about HADR system topologies here. Next, we'll talk about challenges posed by ML in HADR systems and see a demo of these topologies in action!</p>\n<h2 id=\"heading-part-2-hadr-system-challenges-by-ml-deployments-and-load-testing-ml-hadr-system\">Part 2 - HADR system challenges by ML deployments and load testing ML-HADR system</h2>\n<p>Machine Learning heavy deployments bring their own set of challenges to any HADR system. ML models can be deployed in several ways, due to which it becomes important for architects designing HADR systems to choose the right deployment strategies for best results.</p>\n<h3 id=\"heading-challenges-posed-to-ml-pipelines-for-high-availability\">Challenges posed to ML pipelines for high availability</h3>\n<p>Some of the challenges faced with ML deployments for HADR are -</p>\n<h4 id=\"heading-what-is-a-good-ml-deployment\">What is a good ML deployment?</h4>\n<p>The definition of a good ML deployment changes with who is answering this question. Fir examples -</p>\n<p>Business owners - performs fast inference Researchers - highest accuracy Developers - gets built quickly Q/A engineers - never fails Investors - sounds cool, brings in the $$</p>\n<h4 id=\"heading-volume-of-data-processed\">Volume of data processed</h4>\n<p>Volume of data can be a major challenge to most ML systems. Too much data and you may be running late at your training and too less of it, your inference suffers.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960251922/a7daf4f0-b232-424a-bff0-e65e5f260f04.png\" alt class=\"image--center mx-auto\" /></p>\n<h4 id=\"heading-quality-of-data\">Quality of data</h4>\n<p>Data quality refers to how informative and complete a given chunk of data is. The lower the data quality, the tougher it is to derive insights from it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960180925/68483f29-961f-4c7a-92d1-12ef172fcbf0.png\" alt class=\"image--center mx-auto\" /></p>\n<h4 id=\"heading-model-decay\">Model decay</h4>\n<p>The phenomenon in Machine Learning that leads to predictions made by a model become less accurate over time. Primary reasons for model decay are:</p>\n<ul>\n<li><p>Data drift</p>\n</li>\n<li><p>Concept drift</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960192366/1a966a6e-e6a5-4a72-9cb3-2f14742d0360.png\" alt class=\"image--center mx-auto\" /></p>\n<h4 id=\"heading-speed-of-inference-against-various-inputs\">Speed of inference against various inputs</h4>\n<p>Speed of inference can change with changing input. If your model performs inference under 1s for most images ranging appx 10MB, what does it do when someone uploads an image of 1GB? Does your system reject the image or does it take down the building?</p>\n<h3 id=\"heading-load-testing-ml-hadr-systems\">Load testing ML-HADR systems</h3>\n<p>Finally, let us load-test a few topologies which server ML based content. To do so, we shall be using the Locus tool along with a self-engineered set of scripts that work as nodes and load balancer.</p>\n<p>I have published the code for this setup here - <a target=\"_blank\" href=\"https://github.com/xprilion/dummy-topology-loadtest\">https://github.com/xprilion/dummy-topology-loadtest</a></p>\n<p>The contents of this system are -</p>\n<ol>\n<li><p><a target=\"_blank\" href=\"http://router.py\"><code>router.py</code></a> : this file will act as a dummy load-balancer.</p>\n</li>\n<li><p><code>predictors/predict**X**.py</code> - these files are numbered, replacing X, and will be active as node servers.</p>\n</li>\n<li><p><code>topology/**topology_name**.json</code> - these json files contain information regarding the topologies available. We will be updating the data inside these files while load testing the topology they represent.</p>\n</li>\n</ol>\n<p>To setup the load test run, first ensure that in the files inside the <code>topology</code> directory, all the topology files are in their initial states, as shown below -</p>\n<h4 id=\"heading-single-server-system\">Single server system</h4>\n<p>In this system, there is a single server handling all resources.</p>\n<pre><code class=\"lang-plaintext\">{\n    \"predict1\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9696\"\n    }\n}\n</code></pre>\n<h4 id=\"heading-2-active-system\">2 Active system</h4>\n<p>In this system, initially, there are 2 servers responding to requests. In event of failure of any one or both servers, a third system steps in as replacement while the other two are fixed.</p>\n<pre><code class=\"lang-plaintext\">{\n    \"predict1\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9696\"\n    },\n    \"predict2\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9697\"\n    },\n    \"predict3\": {\n        \"status\": false,\n        \"load\": 0,\n        \"port\": \"9698\"\n    }\n}\n</code></pre>\n<p>Notice that the <code>status</code> of <code>predict3</code> server is set to <code>false</code>.</p>\n<h4 id=\"heading-3-active-system\">3 Active system</h4>\n<p>In a 3-active system, there are 3 servers available to handle requests.</p>\n<pre><code class=\"lang-plaintext\">{\n    \"predict1\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9696\"\n    },\n    \"predict2\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9697\"\n    },\n    \"predict3\": {\n        \"status\": true,\n        \"load\": 0,\n        \"port\": \"9698\"\n    }\n}\n</code></pre>\n<p>Then, ensure that in <a target=\"_blank\" href=\"http://router.py\"><code>router.py</code></a>, the <code>topology</code> variable is set to <code>0</code>. This will correspond to the single server system.</p>\n<p>Next, we fire up the Locus UI by running the <code>locust</code> command inside the <code>locust</code> directory.</p>\n<p>Specify the number of users to spawn and the spawn rate. Provide a suitable host. Locust will inform the server under stress that the requests are coming from the specified host.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960270987/3aeec339-28bc-461c-82a4-952f95fd7c4f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Click on <strong>Start Swarming</strong> to start throwing requests at the server based on the script specified in the <code>locust/</code><a target=\"_blank\" href=\"http://locustfile.py\"><code>locustfile.py</code></a>.</p>\n<p>Observe the charts that show how the system is responding to the increase in the load. After some time, the first server failures start appearing. We'll keep a note of when the first error appears.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1701960281544/39cba6e0-15c5-4b83-ad3d-7f340dace496.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now, change the <code>topology</code> variable in <a target=\"_blank\" href=\"http://router.py\"><code>router.py</code></a> to <code>1</code> and run Locust. In the next step, change the <code>topology</code> variable to <code>2</code> and run Locust again.</p>\n<p>Let's plot a chart of when the first failures happen in case of each system -</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Topology</td><td>RPS at failure</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Single</td><td>5.2</td></tr>\n<tr>\n<td>2-Active</td><td>8.6</td></tr>\n<tr>\n<td>3-Active</td><td>7.4</td></tr>\n</tbody>\n</table>\n</div><p>As expected, the 2-Active system has the peak capacity in our use-case. However, here's an interesting observation -</p>\n<p>Let us compare the values of the predict servers on 2-Active and 3-Active systems after the load test -</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Server</td><td>2-Active</td><td>3-Active</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Predict1</td><td>10</td><td>5</td></tr>\n<tr>\n<td>Predict2</td><td>10</td><td>7</td></tr>\n<tr>\n<td>Predict3</td><td>9</td><td>8</td></tr>\n</tbody>\n</table>\n</div><p>As we see, the 2-Active system is completely saturated while the 3-Active system is slightly above half its capacity.</p>\n<p>Thus, even though the 2-Active system fails after the 3-Active system has shown its first error, the 3-Active system will saturate later and continue to serve requests for a longer duration.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Depending on the HADR system metric you may want to optimize for, you can choose the topology that works best for your use case. You can choose to have multiple replicas of the same network topology or create your own configuration. The scripts provided for load testing can be extended to more topologies. Have fun testing your HADR system designs with it!</p>\n"},"publishedAt":"2022-10-09T06:30:00.000Z","seo":{"title":"091020221708","description":null},"tags":[{"slug":"blog"},{"slug":"ppt"}]}}]}},"staticQueryHashes":[],"slicesMap":{}}