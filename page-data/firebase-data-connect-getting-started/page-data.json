{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/firebase-data-connect-getting-started/","result":{"pageContext":{"id":"667d44233e8accb3c47cd0f0","node":{"id":"667d44233e8accb3c47cd0f0","slug":"firebase-data-connect-getting-started","url":"https://xprilion.com/firebase-data-connect-getting-started","title":"Firebase Data Connect - Getting Started","featured":false,"subtitle":null,"brief":"tl;dr - Demo: https://dataconnectdemo-x.web.app/, Github: https://github.com/xprilion/firebase-data-connect-demo\n\nAt Google I/O 2024, the Firebase team announced Data Connect. In their own words -\n\nFirebase's first relational database solution for de...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/upload/v1718538101983/802f8835-9876-4467-9a4c-ff90cbb87133.png"},"content":{"html":"<p>tl;dr - Demo: <a target=\"_blank\" href=\"https://dataconnectdemo-x.web.app/\">https://dataconnectdemo-x.web.app/</a>, Github: <a target=\"_blank\" href=\"https://github.com/xprilion/firebase-data-connect-demo\">https://github.com/xprilion/firebase-data-connect-demo</a></p>\n<hr />\n<p>At Google I/O 2024, the Firebase team announced Data Connect. In their own words -</p>\n<blockquote>\n<p>Firebase's first relational database solution for developers who want to create secure and scalable apps with Cloud SQL for PostgreSQL and type-safe mobile and web SDKs</p>\n</blockquote>\n<p>Firebase started out as a database product. The first offering from the platform was the Firebase Realtime Database and it was an instant hit among developers in 2011.</p>\n<p>Ever since, relational database on Firebase was a much awaited feature, one which the developer community had been requesting since its very first days. The question of using SQL with Firebase was so common that in its early days, Firebase team put out a blog discussing usage of SQL with the platform - <a target=\"_blank\" href=\"https://firebase.blog/posts/2013/04/denormalizing-your-data-is-normal\">https://firebase.blog/posts/2013/04/denormalizing-your-data-is-normal</a>.</p>\n<p>Over a decade of people on Stackoverflow asking for relational databases on Firebase and being told it did not exist, we finally have it. What this means is that for <a target=\"_blank\" href=\"https://chatgpt.com/share/77c3eb7f-717f-44fa-bafb-ab4b233b1490\">every LLM trained on data before Google I/O 2024, it will still tell you that this feature does not exist</a>. Even <a target=\"_blank\" href=\"https://g.co/gemini/share/ab7f7ef9b636\">Gemini as of 16th June, 2024 tells you that Firebase doesn't support RDBMs</a>!</p>\n<p>And hence, the world needs a <s>clown</s> hero to write about Firebase Data Connect for LLMs to pick it up eventually.</p>\n<p><img src=\"https://i.imgflip.com/8u0pot.jpg\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-getting-started\">Getting Started</h2>\n<p>As of the date of writing this blog, Firebase Data Connect is still in Private Preview mode. But if you're reading this, I assume you've either got access or want to get access to it. If you're the latter category, click the \"Sign up for early access\" button on this page - <a target=\"_blank\" href=\"https://firebase.google.com/products/data-connect\">https://firebase.google.com/products/data-connect</a>. This button may be removed at any time!</p>\n<p>Once you have access to it, you'll need to put your Firebase project on a paid plan. And before you jump the gun on the Purchase button for the Blaze plan, here's a small breakdown of what this entails -</p>\n<ol>\n<li><p>Every Firebase project has an associated Google Cloud Platform project as well. If you put your Firebase project on a paid plan, you're not necessarily subjecting yourself to all the GCP products pricing - only the subset of those which enable all the features for you via GCP backends. Unless you go ahead and start using the same project for GCP features directly from the GCP console.</p>\n</li>\n<li><p>Firebase Data Connect under the hood uses GCP Cloud SQL, you might end up spending more than what you planned if you leave the project unattended.</p>\n</li>\n</ol>\n<p>Disclaimers done, and given you're reading this even now, I'm assuming you're okay with getting a paid Firebase plan, so we march ahead!</p>\n<p>Now, clicking on Get Started on the Firebase Data Connect page will start the Cloud SQL instance deployment/selection process.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1718534562375/fe20415a-e289-49a8-b4c8-0c59096a020f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This dialog box tells a lot about what's going on under the hood - you'll be deploying a Cloud SQL instance of the base configuration offered by GCP - 1vcpu, 3.67GB RAM and 10GB storage. The amount you'll be paying for this instance is $9/month.</p>\n<p>I wonder, where does this pricing stand against other cloud based database offerings today?</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Platform</td><td>Minimum Offering</td><td>Pricing</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Firebase Data Connect</td><td>1vcpu, 3.67GB RAM and 10GB storage</td><td>$9/month</td></tr>\n<tr>\n<td>PlanetScale</td><td>1/8 vcpu, 1GB RAM and 10GB storage</td><td>$39/month</td></tr>\n<tr>\n<td>Supabase</td><td>500MB storage</td><td>Free</td></tr>\n<tr>\n<td>Supabase</td><td>8 GB storage</td><td>$25/month (additional services)</td></tr>\n<tr>\n<td>Railway</td><td>5GB storage</td><td>$5/month (usage extra, additional services)</td></tr>\n</tbody>\n</table>\n</div><p>You'll notice the above table does not include comparison of prices on almost all the Cloud Providers. Reason - almost all of them charge on the basis of usage - and depending on how you hit the database, the pricing can be in multiples of coffee cups or in multiples of your net worth.</p>\n<p>If you had started your database deployment before the table, by the time you're done reading the above parts, its probably live and ready to take your requests.</p>\n<p>On the <code>Schema</code> tab, you'll be given the option to work on the schema for the database using either Google's Project IDX or using Visual Studio Code extensions.</p>\n<p>You'll see the following console for the database when you switch to the \"Data\" tab -</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1718535989574/670d7d70-3807-4a9f-b0f6-f5a9955d3c00.png\" alt class=\"image--center mx-auto\" /></p>\n<p>As of now, we've a blank slate.</p>\n<h2 id=\"heading-add-schema-to-the-db\">Add schema to the DB</h2>\n<p>Now, we'll try to put the schema into the database and see how it shows up! I'm going to use neither of the two methods displayed on the Firebase Console because I'm Batman.</p>\n<p><img src=\"https://i.imgflip.com/8v59xq.jpg\" alt /></p>\n<p>On my local terminal, I created a new project using</p>\n<pre><code class=\"lang-bash\">pnpm dlx create-next-app@latest firebase-data-connect\n</code></pre>\n<p>Recently Firebase came out with Public preview of Nextjs app hosting on Firebase, and while we're testing Data Connect, we can check that out as well!</p>\n<p>Next, let me install and login to <code>firebase-cli</code>.</p>\n<pre><code class=\"lang-bash\">pnpm add -g firebase-tools@latest\nfirebase login\n</code></pre>\n<p>Next, let's initialize Firebase in the project directory.</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">cd</span> firebase-data-connect\nfirebase init\n</code></pre>\n<p>In this, for my use-case I selected the services - Functions, Hosting and Data Connect. I also chose to install the emulators for all the same. You'll not be able to setup a local emulator for Data Connect if you do not already have a local instance of Postgres!</p>\n<p>While Data Connect is in Private Preview, you might have to run the following command as well:</p>\n<pre><code class=\"lang-bash\">firebase experiments:<span class=\"hljs-built_in\">enable</span> dataconnect\n</code></pre>\n<p>You should have the following folder tree at this point:</p>\n<pre><code class=\"lang-plaintext\">├── README.md\n├── app\n│   ├── favicon.ico\n│   ├── globals.css\n│   ├── layout.tsx\n│   └── page.tsx\n├── dataconnect\n│   ├── dataconnect.yaml\n│   ├── default-connector\n│   │   ├── connector.yaml\n│   │   ├── mutations.gql\n│   │   └── queries.gql\n│   └── schema\n│       └── schema.gql\n├── firebase.json\n├── next-env.d.ts\n├── next.config.mjs\n├── package.json\n├── pnpm-lock.yaml\n├── postcss.config.mjs\n├── public\n│   ├── next.svg\n│   └── vercel.svg\n├── tailwind.config.ts\n└── tsconfig.json\n</code></pre>\n<p>Now, we're good to start working with the files inside <code>dataconnect</code> folder.</p>\n<p>Let's start editing stuff inside <code>dataconnect/default-connector</code>. Turns out, there's an existing example provided here of some email-app. Let's use this!</p>\n<p>There's nothing to edit in the <code>connector.yaml</code> file, but in <code>mutations.gql</code>, and <code>queries.gql</code> simply comment in the sample code!</p>\n<p>PS: This is the sample example being used by the Firebase team on their <a target=\"_blank\" href=\"https://firebase.google.com/docs/data-connect/quickstart\">Get Started blog for Data Connect</a>.</p>\n<p>Next, comment in the sample code on <code>schema/schema.gql</code>.</p>\n<p>Now we're good to deploy the schema to the database.</p>\n<pre><code class=\"lang-bash\">firebase deploy\n</code></pre>\n<p>This command will get you started on pushing the schema changes o the Database instance on Cloud SQL. You might be asked to review/approve the migrations in the process. You'll see this message if it happens -</p>\n<pre><code class=\"lang-plaintext\">⚠  dataconnect: Your new schema is incompatible with the schema of your CloudSQL database. The following SQL statements will migrate your database schema to match your new Data Connect schema.\n</code></pre>\n<p>You'll be shown the SQL statements which are going to be run against your database and given the option to either <code>Execute</code> or <code>Abort</code>. In my case, I could totally watch the world (my DB) burn so I just went ahead with <code>Execute</code> without even reading the changes. But if you're working on something serious, do not do this, else your DB might get executed.</p>\n<p>After this step, if you refresh the Data Connect dashboard on Firebase, you'll be able to see the newly created Queries and Mutations visible there, ready to be run from the dashboard itself!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1719475302961/efea4be1-95ca-40b6-9d53-cc8b11d987df.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The schema is visible beautifully, neat!</p>\n<p>Let me quickly put some data into the DB then, by creating a new user and listing it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1719474689749/e002c6be-b8e9-4337-8327-9c6c7de91a08.png\" alt class=\"image--center mx-auto\" /></p>\n<p>For those of you who have worked with GraphQL before, you'll be very comfortable with this interface because its almost just a Firebase-ified version of the GraphQL Playground.</p>\n<h2 id=\"heading-connect-to-nextjs-app\">Connect to Nextjs App</h2>\n<p>Our exploration fortunately does not stop at being able to add data to the database. It continues to finding out how we can use this database from within the Nextjs code we're writing.</p>\n<p>We'll be using the SDK generator provided by Firebase Data Connect folks to create the SDK client. This is in line with other tools like PrismaDB where you need to define a schema and then generate its client.</p>\n<p>First, head to <code>dataconnect/default-connector/connector.yaml</code> and update it to match the below configuration:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">connectorId:</span> <span class=\"hljs-string\">\"default-connector\"</span>\n<span class=\"hljs-attr\">authMode:</span> <span class=\"hljs-string\">\"PUBLIC\"</span> \n<span class=\"hljs-attr\">generate:</span>\n  <span class=\"hljs-attr\">javascriptSdk:</span>\n    <span class=\"hljs-comment\"># Create a custom package name for your generated SDK</span>\n    <span class=\"hljs-attr\">package:</span> <span class=\"hljs-string\">\"@dataconnectdemo/email\"</span>\n    <span class=\"hljs-comment\"># Tells Data Connect where to store the generated SDK code, this should be in the same</span>\n    <span class=\"hljs-comment\"># directory as your app code</span>\n    <span class=\"hljs-attr\">outputDir:</span> <span class=\"hljs-string\">\"../../dataconnectdemo-generated\"</span>\n</code></pre>\n<p>Now, running the below command should generate the client library you need for accessing this database from code:</p>\n<pre><code class=\"lang-bash\">firebase dataconnect:sdk:generate\n</code></pre>\n<p>In case this does not work, you might have to install this peerDependency yourself, as shown below:</p>\n<pre><code class=\"lang-bash\">pnpm add firebase@dataconnect-preview\n</code></pre>\n<p>After this, you'll have to run the following command to link the generated SDK as a dependency:</p>\n<pre><code class=\"lang-bash\">pnpm link ./dataconnectdemo-generated\n</code></pre>\n<p>And add the following line to your <code>package.json</code> if not present:</p>\n<pre><code class=\"lang-json\">  <span class=\"hljs-string\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"@dataconnectdemo/email\"</span>: <span class=\"hljs-string\">\"file:dataconnectdemo-generated\"</span>, <span class=\"hljs-comment\">// &lt;- this line</span>\n    <span class=\"hljs-attr\">\"firebase\"</span>: <span class=\"hljs-string\">\"10.12.0-dataconnect-preview.388b61c7e\"</span>,\n    <span class=\"hljs-attr\">\"next\"</span>: <span class=\"hljs-string\">\"14.2.4\"</span>,\n    <span class=\"hljs-attr\">\"react\"</span>: <span class=\"hljs-string\">\"^18\"</span>,\n    <span class=\"hljs-attr\">\"react-dom\"</span>: <span class=\"hljs-string\">\"^18\"</span>\n  },\n</code></pre>\n<p>This done, we'll be able to import the generated Data Connect SDK to our app.</p>\n<p>To do this, let's create a new file at <code>app/libs/data-connect.ts</code> to hold our connection with Data Connect. You might be used to naming this <code>firebase.ts</code> , that works as well.</p>\n<pre><code class=\"lang-typescript\"><span class=\"hljs-comment\">// app/libs/data-connect.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { initializeApp, getApps } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase/app'</span>;\n<span class=\"hljs-keyword\">import</span> { getDataConnect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase/data-connect'</span>\n<span class=\"hljs-keyword\">import</span> { connectorConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@dataconnectdemo/email'</span>\n\n<span class=\"hljs-keyword\">const</span> firebaseConfig = {\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> firebase_app = getApps().length === <span class=\"hljs-number\">0</span> ? initializeApp(firebaseConfig) : getApps()[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> dataConnect = getDataConnect(firebase_app, connectorConfig)\n</code></pre>\n<p>Needless to say, you'll have to create corresponding entries in your <code>.env</code> file.</p>\n<p>This done, let's update our <code>app/page.tsx</code> with the following code:</p>\n<pre><code class=\"lang-typescript\"><span class=\"hljs-comment\">// app/page.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> { listInbox, ListInboxResponse, listUsers, ListUsersResponse } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@dataconnectdemo/email'</span>\n<span class=\"hljs-keyword\">import</span>  { dataConnect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/app/libs/data-connect\"</span>;\n<span class=\"hljs-keyword\">import</span> Email <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./emails'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Home</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> uid = <span class=\"hljs-string\">\"00001\"</span>\n\n    <span class=\"hljs-keyword\">const</span> dc = dataConnect;\n\n    <span class=\"hljs-keyword\">let</span> emails: ListInboxResponse[<span class=\"hljs-string\">'emails'</span>] = [];\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> listInbox(dc, { uid });\n    <span class=\"hljs-keyword\">const</span> data = response.data;\n        emails = data.emails\n    } <span class=\"hljs-keyword\">catch</span>(e) {\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">\"Error: \"</span>, e)\n    }\n\n    <span class=\"hljs-keyword\">const</span> firstEmail = emails.at(<span class=\"hljs-number\">0</span>)!;\n\n    <span class=\"hljs-keyword\">return</span> (\n      emails.length &gt; <span class=\"hljs-number\">0</span> ? (\n        &lt;Email \n        initialEmails={emails}\n        firstEmail={firstEmail}\n        uid={uid}\n       /&gt;\n      ) : (\n        &lt;&gt;No emails!&lt;/&gt;\n      )\n  );\n}\n</code></pre>\n<p>In this, we're merely establishing a connection with Data Connect and fetching the list of emails.</p>\n<p>This done, let's define the <code>Email</code> component. I've taken much of this code directly from the started repo which is setup in the IDX environment for Data Connect.</p>\n<pre><code class=\"lang-typescript\"><span class=\"hljs-comment\">// app/emails.tsx</span>\n\n<span class=\"hljs-string\">\"use client\"</span>; <span class=\"hljs-comment\">// This is a client component 👈🏽</span>\n\n<span class=\"hljs-keyword\">import</span> { useCallback, useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span>  { dataConnect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/app/libs/data-connect\"</span>;\n<span class=\"hljs-keyword\">import</span> { deleteEmail, listInbox } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@dataconnectdemo/email'</span>\n\n\n<span class=\"hljs-keyword\">interface</span> Props {\n    initialEmails: <span class=\"hljs-built_in\">any</span>;\n    firstEmail: <span class=\"hljs-built_in\">any</span>;\n    uid: <span class=\"hljs-built_in\">string</span>;\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Email</span>(<span class=\"hljs-params\">{initialEmails, uid, firstEmail}: Props</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [selectedEmail, setSelectedEmail] = useState(firstEmail); <span class=\"hljs-comment\">// Default to the first email</span>\n    <span class=\"hljs-comment\">// const [isComposeOpen, setIsComposeOpen] = useState(false);</span>\n    <span class=\"hljs-keyword\">const</span> [emails, setEmails] = useState&lt;<span class=\"hljs-built_in\">any</span>&gt;(initialEmails);\n    <span class=\"hljs-keyword\">const</span> dc = dataConnect;\n\n    <span class=\"hljs-keyword\">return</span> (\n        &lt;main className=<span class=\"hljs-string\">\"col-span-2 border-l flex flex-col\"</span>&gt;\n                {<span class=\"hljs-comment\">/* Actions */</span>}\n\n                &lt;header className=<span class=\"hljs-string\">\"header-bar justify-end pr-4\"</span>&gt;\n                    &lt;button className=<span class=\"hljs-string\">\"button\"</span> aria-label=<span class=\"hljs-string\">\"Delete\"</span>\n            onClick={<span class=\"hljs-keyword\">async</span> () =&gt; {\n              <span class=\"hljs-keyword\">await</span> deleteEmail(dc, { uid: <span class=\"hljs-string\">\"user_david\"</span>, emailId: selectedEmail.id })\n              setEmails([...emails.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">email: { id: <span class=\"hljs-built_in\">any</span>; }</span>) =&gt;</span> email.id !== selectedEmail.id)]);\n            }}&gt;\n                        &lt;svg\n                            xmlns=<span class=\"hljs-string\">\"http://www.w3.org/2000/svg\"</span>\n                            viewBox=<span class=\"hljs-string\">\"0 -960 960 960\"</span>\n                            className=<span class=\"hljs-string\">\"w-5\"</span>\n                        &gt;\n                            &lt;path d=<span class=\"hljs-string\">\"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z\"</span> /&gt;\n                        &lt;/svg&gt;\n                    &lt;/button&gt;\n                &lt;/header&gt;\n                {<span class=\"hljs-comment\">/* Email details */</span>}\n                &lt;div className=<span class=\"hljs-string\">\"relative flex flex-col flex-grow p-8 pb-0 overflow-y-auto h-[400px]\"</span>&gt;\n                    &lt;div className=<span class=\"hljs-string\">\"flex flex-col border-b pb-4\"</span>&gt;\n                        {<span class=\"hljs-comment\">/* Metadata */</span>}\n                        &lt;div className=<span class=\"hljs-string\">\"flex items-baseline gap-2 justify-between mb-3\"</span>&gt;\n                            {<span class=\"hljs-comment\">/* Sender */</span>}\n                            &lt;div className=<span class=\"hljs-string\">\"flex gap-2 items-baseline\"</span>&gt;\n                                &lt;span className=<span class=\"hljs-string\">\"font-medium\"</span>&gt;{selectedEmail.sender.name}&lt;/span&gt;\n                                &lt;span className=<span class=\"hljs-string\">\"text-sm text-gray-700\"</span>&gt;\n                                    {selectedEmail.sender.email}\n                                &lt;/span&gt;{<span class=\"hljs-string\">\" \"</span>}\n                            &lt;/div&gt;\n\n                            {<span class=\"hljs-comment\">/* Time */</span>}\n                            &lt;time className=<span class=\"hljs-string\">\"text-sm\"</span>&gt;{selectedEmail.date}&lt;/time&gt;\n                        &lt;/div&gt;\n\n                        {<span class=\"hljs-comment\">/* Subject */</span>}\n                        &lt;p className=<span class=\"hljs-string\">\"font-medium text-2xl font-display\"</span>&gt;\n                            {selectedEmail.subject}\n                        &lt;/p&gt;\n                    &lt;/div&gt;\n\n                    &lt;article className=<span class=\"hljs-string\">\"py-4\"</span> dangerouslySetInnerHTML={{ __html: selectedEmail.content }} /&gt;\n\n                &lt;/div&gt;\n            &lt;/main&gt;\n    )\n}\n</code></pre>\n<p>This done, with data pre-inserted from the Data Connect Dashboard, we'll be able to see the following output after hitting <code>firebase deploy</code> from the terminal.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1719484929995/623af264-4dfe-4b73-99af-054cb4cd60c0.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Here's the link to my deployment: <a target=\"_blank\" href=\"https://dataconnectdemo-x.web.app/\">https://dataconnectdemo-x.web.app/</a></p>\n<h2 id=\"heading-wrap-up\">Wrap Up</h2>\n<p>After writing this tutorial and going through Firebase Data Connect setup and usage, I see the amazing potential this product has for the future of Firebase. At the same time, things are still a bit frictional, as is to be expected while its in Private Preview. I believe it will eventually become magically fitting like all the other Firebase features that have matured immensely over the years.</p>\n<p>Finally, remember that I took the unconventional route for this tutorial by not using any of the recommended methods by the team. There are chances it might stop working at any point, which is when you need to start putting error message comments below!</p>\n"},"publishedAt":"2024-06-27T10:51:15.929Z","seo":{"title":null,"description":null},"tags":[{"slug":"data-connect"},{"slug":"blog"},{"slug":"firebase"},{"slug":"databases"},{"slug":"database"},{"slug":"nextjs"}]},"ogImageUrl":"https://cdn.xpri.dev/covers/667d44233e8accb3c47cd0f0.png"}},"staticQueryHashes":[],"slicesMap":{}}