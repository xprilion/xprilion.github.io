{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/python-websockets-ssl-with-lets-encrypt/","result":{"pageContext":{"id":"6571975384a627f7f38fc6e8","node":{"id":"6571975384a627f7f38fc6e8","slug":"python-websockets-ssl-with-lets-encrypt","url":"https://xprilion.com/python-websockets-ssl-with-lets-encrypt","title":"Python Websockets SSL with Let's Encrypt","subtitle":null,"brief":"This tutorial is an explanation of my gist Python Websockets SSL with Let's Encrypt .\nWith the launch of HTML5 in 2008, a technology that immediately took off in popularity was WebSockets. According to W3C, the basic definition of a Websocket is - an...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/upload/v1701944277424/c11b5ea0-e49e-4596-a790-0a9ea2675142.png"},"content":{"html":"<p>This tutorial is an explanation of my gist <a target=\"_blank\" href=\"https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6\">Python Websockets SSL with Let's Encrypt</a> .</p>\n<p>With the launch of HTML5 in 2008, a technology that immediately took off in popularity was WebSockets. According to W3C, the basic definition of a Websocket is - an interface that enables web applications to maintain bidirectional communications with server-side processes.</p>\n<p>In this short tutorial, I'll be showing you how you can host a WebSocket server with SSL enabled on it. This allows your socket server to run on an HTTPS address.</p>\n<h2 id=\"heading-setup\">Setup</h2>\n<p>We'll be working with <code>asyncio</code> library and for WebSocket server implementation will be using the <code>websockets</code> library.</p>\n<p>The <code>asyncio</code> library comes pre-packaged with Python distributions since Python 3.4. To install <code>websockets</code> library, you can use the following command:</p>\n<pre><code class=\"lang-bash\">pip install websockets\n</code></pre>\n<p>Next, we'll be looking to how to generate the SSL certificate files.</p>\n<h2 id=\"heading-generate-certificate-and-keyfile-using-lets-encrypt\">Generate certificate and keyfile using Let's Encrypt</h2>\n<p>Before you can enable SSL on your WebSocket being run by a Python script, you'll have to generate certificate files for your domain.</p>\n<p>The basic gist of this step is to fetch Let's Encrypt signed certficiates for your domain and store them on your server where the Python WebSocket script is running.</p>\n<p>Here's a great quick tutorial on <a target=\"_blank\" href=\"https://www.digitalocean.com/community/tutorials/how-to-use-certbot-standalone-mode-to-retrieve-let-s-encrypt-ssl-certificates-on-ubuntu-20-04\">How To Use Certbot Standalone Mode to Retrieve Let's Encrypt SSL Certificates on Ubuntu 20.04</a>.</p>\n<h2 id=\"heading-make-certificate-files-accessible\">Make certificate files accessible</h2>\n<p>After generating the files correctly, you need to make them accessible to the current user who runs the Python WebSocket script.</p>\n<p>In the previous step, if <code>certbot</code> stored your certificate files at <code>/etc/letsencrypt/live/your_domain</code> location, you should be able to see 4 files when you perform an <code>ls</code> on the folder -</p>\n<pre><code class=\"lang-bash\">~$ ls /etc/letsencrypt/live/your_domain\ncert.pem  chain.pem  fullchain.pem  privkey.pem  README\n</code></pre>\n<p>To change the owner of the certificate files, use the following command:</p>\n<pre><code class=\"lang-bash\">~$ sudo chown -R $(id -u):$(id -g) /etc/letsencrypt/live/your_domain\n</code></pre>\n<p>Next, ensure that the right permissions are applied to the folder:</p>\n<pre><code class=\"lang-bash\">~$ sudo chmod -R 400 /etc/letsencrypt/live/your_domain\n</code></pre>\n<p>We're now good to read these files from the Python WebSocket script.</p>\n<h2 id=\"heading-create-server-script\">Create server script</h2>\n<p>While your WebSocket server script will differ from the most barebones implementation, here's one for you -</p>\n<p>Create a file named <code>socket_</code><a target=\"_blank\" href=\"http://server.py\"><code>server.py</code></a>. Then, make all the necessary imports.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n\n<span class=\"hljs-comment\"># WS server example that synchronizes state across clients</span>\n\n<span class=\"hljs-keyword\">import</span> asyncio\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> logging\n<span class=\"hljs-keyword\">import</span> websockets\n<span class=\"hljs-keyword\">import</span> ssl\n\nlogging.basicConfig()\n</code></pre>\n<p>Next, let us configure the SSL for this script, as shown below -</p>\n<pre><code class=\"lang-python\">ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n\n<span class=\"hljs-comment\"># Generate with Lets Encrypt, chown to current user and 400 permissions</span>\nssl_cert = <span class=\"hljs-string\">\"/etc/letsencrypt/live/your_domain/fullchain.pem\"</span>\nssl_key = <span class=\"hljs-string\">\"/etc/letsencrypt/live/your_domain/privkey.pem\"</span>\n\nssl_context.load_cert_chain(ssl_cert, keyfile=ssl_key)\n</code></pre>\n<p>The above code configures the script to run a TLS server with the certificates available in the folder generated by <code>certbot</code>.</p>\n<p>Next, we define the functions that shall be used to notify clients of the socket server and to get information from them.</p>\n<pre><code class=\"lang-python\">STATE = {<span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-number\">0</span>}\n\nUSERS = set()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">state_event</span>():</span>\n    <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"state\"</span>, **STATE})\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">users_event</span>():</span>\n    <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"users\"</span>, <span class=\"hljs-string\">\"count\"</span>: len(USERS)})\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">notify_state</span>():</span>\n    <span class=\"hljs-keyword\">if</span> USERS:  <span class=\"hljs-comment\"># asyncio.wait doesn't accept an empty list</span>\n        message = state_event()\n        <span class=\"hljs-keyword\">await</span> asyncio.wait([user.send(message) <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> USERS])\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">notify_users</span>():</span>\n    <span class=\"hljs-keyword\">if</span> USERS:  <span class=\"hljs-comment\"># asyncio.wait doesn't accept an empty list</span>\n        message = users_event()\n        <span class=\"hljs-keyword\">await</span> asyncio.wait([user.send(message) <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-keyword\">in</span> USERS])\n</code></pre>\n<p>After that, we need to add functions that register and unregister clients from the WebSocket.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">register</span>(<span class=\"hljs-params\">websocket</span>):</span>\n    USERS.add(websocket)\n    <span class=\"hljs-keyword\">await</span> notify_users()\n\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">unregister</span>(<span class=\"hljs-params\">websocket</span>):</span>\n    USERS.remove(websocket)\n    <span class=\"hljs-keyword\">await</span> notify_users()\n</code></pre>\n<p>This done, let us implement a function that gets state update requests from clients and performs it.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">counter</span>(<span class=\"hljs-params\">websocket, path</span>):</span>\n    <span class=\"hljs-comment\"># register(websocket) sends user_event() to websocket</span>\n    <span class=\"hljs-keyword\">await</span> register(websocket)\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">await</span> websocket.send(state_event())\n        <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">for</span> message <span class=\"hljs-keyword\">in</span> websocket:\n            data = json.loads(message)\n            <span class=\"hljs-keyword\">if</span> data[<span class=\"hljs-string\">\"action\"</span>] == <span class=\"hljs-string\">\"minus\"</span>:\n                STATE[<span class=\"hljs-string\">\"value\"</span>] -= <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">await</span> notify_state()\n            <span class=\"hljs-keyword\">elif</span> data[<span class=\"hljs-string\">\"action\"</span>] == <span class=\"hljs-string\">\"plus\"</span>:\n                STATE[<span class=\"hljs-string\">\"value\"</span>] += <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">await</span> notify_state()\n            <span class=\"hljs-keyword\">else</span>:\n                logging.error(<span class=\"hljs-string\">\"unsupported event: {}\"</span>, data)\n    <span class=\"hljs-keyword\">finally</span>:\n        <span class=\"hljs-keyword\">await</span> unregister(websocket)\n</code></pre>\n<p>Finally, we run the server.</p>\n<pre><code class=\"lang-python\">start_server = websockets.serve(counter, <span class=\"hljs-string\">\"0.0.0.0\"</span>, <span class=\"hljs-number\">6789</span>, ssl=ssl_context)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()\n</code></pre>\n<p>How you expose the server to the internet, I shall leave that on your use case. However, you can explore this tutorial on <a target=\"_blank\" href=\"https://websockets.readthedocs.io/en/stable/howto/nginx.html\">Websockets - Deploy behind nginx</a>.</p>\n<h2 id=\"heading-implement-a-client-page\">Implement a client page</h2>\n<p>To test the above WebSocket script, you can spin up your own client script or feel free to use the <a target=\"_blank\" href=\"https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6#file-socket_client-html\">socket_client.html</a> file I've provided.</p>\n<p>Make sure to update the following line in the client file to point to your live server -</p>\n<pre><code class=\"lang-javascript\">websocket = <span class=\"hljs-keyword\">new</span> WebSocket(<span class=\"hljs-string\">\"wss://localhost:6789/\"</span>);\n</code></pre>\n<p>Note that we're using the <code>wss://</code> protocol here instead of <code>ws://</code> protocol which is popularly found on other tutorials on the internet.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>This was my attempt at explaining the gist I put out more than an year back. Hope it helps you go through the process easier than how I had first written it.</p>\n<p>Make sure to leave me feedback on how this blog went!</p>\n"},"publishedAt":"2022-11-20T18:30:00.000Z","seo":{"title":"211120221708","description":null},"tags":[{"slug":"blog"}]}}},"staticQueryHashes":[],"slicesMap":{}}