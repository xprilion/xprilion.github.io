{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-websockets-ssl-with-lets-encrypt/","result":{"data":{"site":{"siteMetadata":{"title":"xprilion's blog","author":"Anubhav Singh","siteUrl":"https://xprilion.com"}},"markdownRemark":{"id":"89fb7b3a-4218-532f-a23d-7f779bd4c086","excerpt":"This tutorial is an explanation of my gist Python Websockets SSL with Let’s Encrypt\n. With the launch of HTML5 in 2008, a technology that immediately took off…","html":"<p><img src=\"/images/covers/python-websockets-ssl-with-lets-encrypt.png\"></p>\n<p>This tutorial is an explanation of my gist <a href=\"https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6\">Python Websockets SSL with Let’s Encrypt\n</a>.</p>\n<p>With the launch of HTML5 in 2008, a technology that immediately took off in popularity was WebSockets. According to W3C, the basic definition of a Websocket is - an interface that enables web applications to maintain bidirectional communications with server-side processes.</p>\n<p>In this short tutorial, I’ll be showing you how you can host a WebSocket server with SSL enabled on it. This allows your socket server to run on an HTTPS address. </p>\n<h2>Setup</h2>\n<p>We’ll be working with <code class=\"language-text\">asyncio</code> library and for WebSocket server implementation will be using the <code class=\"language-text\">websockets</code> library.</p>\n<p>The <code class=\"language-text\">asyncio</code> library comes pre-packaged with Python distributions since Python 3.4. To install <code class=\"language-text\">websockets</code> library, you can use the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> websockets</code></pre></div>\n<p>Next, we’ll be looking to how to generate the SSL certificate files.</p>\n<h2>Generate certificate and keyfile using Let’s Encrypt</h2>\n<p>Before you can enable SSL on your WebSocket being run by a Python script, you’ll have to generate certificate files for your domain. </p>\n<p>The basic gist of this step is to fetch Let’s Encrypt signed certficiates for your domain and store them on your server where the Python WebSocket script is running.</p>\n<p>Here’s a great quick tutorial on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-certbot-standalone-mode-to-retrieve-let-s-encrypt-ssl-certificates-on-ubuntu-20-04\">How To Use Certbot Standalone Mode to Retrieve Let’s Encrypt SSL Certificates on Ubuntu 20.04</a>.</p>\n<h2>Make certificate files accessible</h2>\n<p>After generating the files correctly, you need to make them accessible to the current user who runs the Python WebSocket script. </p>\n<p>In the previous step, if <code class=\"language-text\">certbot</code> stored your certificate files at <code class=\"language-text\">/etc/letsencrypt/live/your_domain</code> location, you should be able to see 4 files when you perform an <code class=\"language-text\">ls</code> on the folder - </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">ls</span> /etc/letsencrypt/live/your_domain\ncert.pem  chain.pem  fullchain.pem  privkey.pem  README</code></pre></div>\n<p>To change the owner of the certificate files, use the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token parameter variable\">-R</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> <span class=\"token parameter variable\">-u</span><span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> <span class=\"token parameter variable\">-g</span><span class=\"token variable\">)</span></span> /etc/letsencrypt/live/your_domain</code></pre></div>\n<p>Next, ensure that the right permissions are applied to the folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">400</span> /etc/letsencrypt/live/your_domain</code></pre></div>\n<p>We’re now good to read these files from the Python WebSocket script.</p>\n<h2>Create server script</h2>\n<p>While your WebSocket server script will differ from the most barebones implementation, here’s one for you -</p>\n<p>Create a file named <code class=\"language-text\">socket_server.py</code>. Then, make all the necessary imports.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token comment\"># WS server example that synchronizes state across clients</span>\n\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> websockets\n<span class=\"token keyword\">import</span> ssl\n\nlogging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, let us configure the SSL for this script, as shown below - </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ssl_context <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>SSLContext<span class=\"token punctuation\">(</span>ssl<span class=\"token punctuation\">.</span>PROTOCOL_TLS_SERVER<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Generate with Lets Encrypt, chown to current user and 400 permissions</span>\nssl_cert <span class=\"token operator\">=</span> <span class=\"token string\">\"/etc/letsencrypt/live/your_domain/fullchain.pem\"</span>\nssl_key <span class=\"token operator\">=</span> <span class=\"token string\">\"/etc/letsencrypt/live/your_domain/privkey.pem\"</span>\n\nssl_context<span class=\"token punctuation\">.</span>load_cert_chain<span class=\"token punctuation\">(</span>ssl_cert<span class=\"token punctuation\">,</span> keyfile<span class=\"token operator\">=</span>ssl_key<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The above code configures the script to run a TLS server with the certificates available in the folder generated by <code class=\"language-text\">certbot</code>. </p>\n<p>Next, we define the functions that shall be used to notify clients of the socket server and to get information from them.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">STATE <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n\nUSERS <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">state_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>STATE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">users_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"count\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>USERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">notify_state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> USERS<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># asyncio.wait doesn't accept an empty list</span>\n        message <span class=\"token operator\">=</span> state_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> USERS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">notify_users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> USERS<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># asyncio.wait doesn't accept an empty list</span>\n        message <span class=\"token operator\">=</span> users_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> USERS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>After that, we need to add functions that register and unregister clients from the WebSocket.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    USERS<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> notify_users<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    USERS<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> notify_users<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This done, let us implement a function that gets state update requests from clients and performs it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># register(websocket) sends user_event() to websocket</span>\n    <span class=\"token keyword\">await</span> register<span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> websocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>state_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">for</span> message <span class=\"token keyword\">in</span> websocket<span class=\"token punctuation\">:</span>\n            data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">:</span>\n                STATE<span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">await</span> notify_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"plus\"</span><span class=\"token punctuation\">:</span>\n                STATE<span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">await</span> notify_state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                logging<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported event: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> unregister<span class=\"token punctuation\">(</span>websocket<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, we run the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">start_server <span class=\"token operator\">=</span> websockets<span class=\"token punctuation\">.</span>serve<span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6789</span><span class=\"token punctuation\">,</span> ssl<span class=\"token operator\">=</span>ssl_context<span class=\"token punctuation\">)</span>\n\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>start_server<span class=\"token punctuation\">)</span>\nasyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>How you expose the server to the internet, I shall leave that on your use case. However, you can explore this tutorial on <a href=\"https://websockets.readthedocs.io/en/stable/howto/nginx.html\">Websockets - Deploy behind nginx</a>.</p>\n<h2>Implement a client page</h2>\n<p>To test the above WebSocket script, you can spin up your own client script or feel free to use the <a href=\"https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6#file-socket_client-html\">socket_client.html</a> file I’ve provided.</p>\n<p>Make sure to update the following line in the client file to point to your live server - </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">websocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://localhost:6789/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that we’re using the <code class=\"language-text\">wss://</code> protocol here instead of <code class=\"language-text\">ws://</code> protocol which is popularly found on other tutorials on the internet.</p>\n<h2>Conclusion</h2>\n<p>This was my attempt at explaining the gist I put out more than an year back. Hope it helps you go through the process easier than how I had first written it.</p>\n<p>Make sure to leave me feedback on how this blog went!</p>","frontmatter":{"title":"Python Websockets SSL with Let's Encrypt","date":"November 21, 2022","comments":true,"nid":"211120221708"}}},"pageContext":{"slug":"/python-websockets-ssl-with-lets-encrypt/","previous":{"fields":{"slug":"/high-availability-ml-deployments/"},"frontmatter":{"title":"High Availability ML Deployments"}},"next":{"fields":{"slug":"/job-scheduling-on-google-cloud-platform/"},"frontmatter":{"title":"Job Scheduling on Google Cloud Platform"}}}},"staticQueryHashes":["1296475691","3128451518"]}