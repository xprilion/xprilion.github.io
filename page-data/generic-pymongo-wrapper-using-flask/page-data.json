{"componentChunkName":"component---src-templates-blog-post-js","path":"/generic-pymongo-wrapper-using-flask/","result":{"data":{"site":{"siteMetadata":{"title":"xprilion's blog","author":"Anubhav Singh","siteUrl":"https://xprilion.com"}},"markdownRemark":{"id":"4f408077-072b-5f19-8c80-f8c3e9e049b7","excerpt":"Hey there, hope you’re well! It’s been a while since I wrote something here, to my defence I wrote this tutorial about How to setup a secure, remote JupyterLab…","html":"<p>Hey there, hope you’re well! It’s been a while since I wrote something here, to my defence I wrote this tutorial about <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-jupyterlab-environment-on-ubuntu-18-04\">How to setup a secure, remote JupyterLab workstation</a> on <a href=\"https://digitalocean.com\">DigitalOcean</a>. Have you not read it yet? Go ahead and explore it if you’re interested in the topic! Now, moving ahead.</p>\n<p>This blog is going to be about creating a generic wrapper API for your PyMongo installation using Flask. If you’ve little idea about what these terminologies mean, here we go - </p>\n<h2>1. PyMongo</h2>\n<p>When you’re working with the cool <a href=\"https://mongodb.com\">MongoDB</a> using Python, <a href=\"https://pymongo.readthedocs.io/en/stable/\">PyMongo</a> is your go to tool. The distribution facilitates a full fledged support for interacting with MongoDB databases, local or remote and provides a dead simple way of working with it through your Python code.</p>\n<h2>2. Flask</h2>\n<p>A very popular library in Python for creating web sites, often preferred for lightweight tasks and more often for creating API servers quickly, <a href=\"https://flask.palletsprojects.com\">Flask</a> provides a way to have a no-frills web server running in minutes.</p>\n<h2>3. You</h2>\n<p><img src=\"https://media1.tenor.com/images/07feba4572471b21fd4258b6af83c9c4/tenor.gif\" alt=\"Who&#x27;s awesome?\"></p>\n<p>A super cool person reading this nice blog for whom I hope I can make the time spent here worth!</p>\n<p>Now that we’re done with the introductions, let’s chalk out a plan that we shall follow in this tutorial. Imagine a situation where you have a MongoDB database with yourselves, and are wondering how to use it for some basic <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> operations from a remotely running application. Further, to make things interesting, you’re unsure what collections in the database your application shall need, or it may even need to create arbitrary collections at any moment. Fortunately, you hit upon the golden idea of creating some public APIs to your database server using Flask which allow just those operations with our without some authentication, as per your need. </p>\n<p>While I’m going to leave the (tiny) headache of getting a MongoDB server to you, which you can easily get on many online providers, even for free at some places, I shall begin with the requirements of our API. </p>\n<h2>The specification</h2>\n<p>If you went through the specification of CRUD, you know that we need 4 REST APIs to begin with - </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Action</th>\n<th align=\"center\">Method</th>\n<th align=\"center\">MongoDB</th>\n<th align=\"left\">Parameters</th>\n<th align=\"left\">API</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Create</td>\n<td align=\"center\">POST, PUT</td>\n<td align=\"center\">Insert</td>\n<td align=\"left\">None</td>\n<td align=\"left\">example.com/table [POST]</td>\n</tr>\n<tr>\n<td align=\"left\">Read All/One</td>\n<td align=\"center\">GET</td>\n<td align=\"center\">Find</td>\n<td align=\"left\">None/Resource ID</td>\n<td align=\"left\">example.com/table/[id] [POST]</td>\n</tr>\n<tr>\n<td align=\"left\">Update</td>\n<td align=\"center\">POST, PUT, PATCH</td>\n<td align=\"center\">Update</td>\n<td align=\"left\">Resource ID</td>\n<td align=\"left\">example.com/table/id [POST]</td>\n</tr>\n<tr>\n<td align=\"left\">Delete</td>\n<td align=\"center\">DELETE</td>\n<td align=\"center\">Delete</td>\n<td align=\"left\">Resource ID</td>\n<td align=\"left\">example.com/table/id [POST]</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"A Generic PyMongo Wrapper API with Flask","date":"September 14, 2020","comments":true}}},"pageContext":{"slug":"/generic-pymongo-wrapper-using-flask/","previous":{"fields":{"slug":"/ml-on-2gb-ram/"},"frontmatter":{"title":"Machine Learning On 2GB RAM"}},"next":{"fields":{"slug":"/talks/"},"frontmatter":{"title":"Talks"}}}},"staticQueryHashes":["3128451518","3952702277"]}