{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/build-a-google-gemini-pro-store-with-google-sheets/","result":{"pageContext":{"id":"65c87ed66bca40ae7db601f3","node":{"id":"65c87ed66bca40ae7db601f3","slug":"build-a-google-gemini-pro-store-with-google-sheets","url":"https://xprilion.com/build-a-google-gemini-pro-store-with-google-sheets","title":"Build a Gemini Store with Google Sheets","featured":false,"subtitle":"Giving personalities to your Gemini APIs via Gemini Store in Google Sheets","brief":"Overview\nDuration: 1\nHave you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you c...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/GLg0z5z8EQU/upload/fa2ab8a93c2bfbf4eb1abe5d5b261f9f.jpeg"},"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Have you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you can now have a super smart AI assistant do the grind work for you!</p>\n<p>In this article, we'll cover a very simple way of giving personalities or specific roles to your Gemini powered API calls via the simple and popular interface of Google Sheets!</p>\n<p>Here's a screen recording of what we're building:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://youtu.be/KqUNS9WoMkQ\">https://youtu.be/KqUNS9WoMkQ</a></div>\n<p> </p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>Access to a Google Account</p>\n</li>\n<li><p>Access to Google's Gemini Pro APIs via Google AI Studio</p>\n</li>\n</ol>\n<h2 id=\"heading-architecture\">Architecture</h2>\n<p>Duration: 2</p>\n<p>We'll be building our product's architecture in the following manner:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707635641736/de16e03a-935f-4081-b616-c81b5fe4b520.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The Google Sheets will interact on every edit operation with the associated Apps Script for that Sheet which in turn talks to the Gemini Pro API. We'll be using the Gemini Pro API via the Google AI Studio in order to get some free API calls at the cost of being non-production ready. However, you can use Gemini Pro APIs via Vertex AI for production workloads.</p>\n<h2 id=\"heading-get-the-gemini-api-key\">Get the Gemini API Key</h2>\n<p>Duration: 3</p>\n<p>Now, let's get an API Key to access the Gemini Pro APIs.</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://makersuite.google.com/\">Google AI Studio</a></p>\n</li>\n<li><p>Click on <a target=\"_blank\" href=\"https://makersuite.google.com/app/apikey\">Get API Key</a></p>\n</li>\n<li><p>Follow the steps provided on the page to generate an API Key. Store the key safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setup-your-google-sheet\">Setup your Google Sheet</h2>\n<p>Duration: 5</p>\n<p>Let us setup your Google Sheet to work like a Gemini Store. To do so, we'll create a second sheet in the default Google Sheet document titled \"Geminis\".</p>\n<p>Fill the following data in this sheet (only for example, you can change as per your wish):</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>name</td><td>sys prompt</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Pilot Gemini</td><td>Drawing on your extensive experience as a seasoned pilot, how would you explain or advise on the following aviation-related query? Use a lot of Pilot terms!</td></tr>\n<tr>\n<td>Pirate Gemini</td><td>As a legendary pirate who has sailed the seven seas, how would you respond to this inquiry with your adventurous spirit and nautical knowledge? Reply in pirate language only.</td></tr>\n<tr>\n<td>Techie Gemini</td><td>As a tech enthusiast with a passion for the latest gadgets and innovations, how would you explain or solve this technology-related problem? Use techie terms!</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-setup-your-apps-script\">Setup your Apps Script</h2>\n<p>Duration: 3</p>\n<p>We will now create the AppScript code to interface between Google Sheets and the Gemini Pro API.</p>\n<ol>\n<li><p>Create a new Google Sheet and create the following columns in it: <code>GeminiName</code>, <code>Query</code>, <code>Response</code>.</p>\n</li>\n<li><p>In your Google Sheet, Click on <code>Extensions &gt; Apps Script</code></p>\n</li>\n<li><p>We'll be editing the <code>Code.gs</code> file. Remove the current contents of this file and head to the next step!</p>\n</li>\n</ol>\n<h2 id=\"heading-listen-to-onedit-changes-to-the-sheet\">Listen to onEdit changes to the sheet</h2>\n<p>Duration: 3</p>\n<p>In your <code>Code.gs</code> file, add the following function which listens to each edit on the Google Sheet and decides if it needs to perform any action on it.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onEdit</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> formResponsesSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Sheet1'</span>); <span class=\"hljs-comment\">// Use getSheetByName for clarity</span>\n  <span class=\"hljs-keyword\">var</span> editedRow = e.range.getRow();\n\n  <span class=\"hljs-comment\">// Avoid running on header row or rows beyond the last content row</span>\n  <span class=\"hljs-keyword\">if</span> (editedRow === <span class=\"hljs-number\">1</span> || editedRow &gt; formResponsesSheet.getLastRow()) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if the edit is in the header or beyond the last content row</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> rowData = formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>).getValues()[<span class=\"hljs-number\">0</span>];\n\n  <span class=\"hljs-comment\">// Check if all required columns are filled (columns 1 to 7, excluding 'Response')</span>\n  <span class=\"hljs-keyword\">if</span> (!rowData.every(isColumnFilled)) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if not all required fields are filled</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> chosenGemini = rowData[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 'Choose your Gemini' is the third column</span>\n  <span class=\"hljs-keyword\">var</span> userQuestion = rowData[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 'Say/Ask something' is the fourth column</span>\n\n  <span class=\"hljs-keyword\">var</span> geminisSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Geminis'</span>);\n  <span class=\"hljs-keyword\">var</span> geminiData = geminisSheet.getRange(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, geminisSheet.getLastRow() - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>).getValues();\n\n  <span class=\"hljs-keyword\">var</span> systemPrompt = findSystemPrompt(geminiData, chosenGemini, userQuestion);\n\n  <span class=\"hljs-keyword\">if</span> (systemPrompt) {\n    <span class=\"hljs-keyword\">var</span> apiResponse = callApi(systemPrompt);\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(apiResponse); <span class=\"hljs-comment\">// Assuming 'Response' is in the 8th column</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(<span class=\"hljs-string\">\"Error: Gemini not found or other error occurred.\"</span>);\n  }\n}\n</code></pre>\n<h2 id=\"heading-create-helper-functions\">Create Helper functions</h2>\n<p>Duration: 3</p>\n<p>Now, let's setup two helper functions to work with the script. The <code>isColumnFilled</code> function checks if that row is full before trying to hit the Gemini API. The <code>findSystemPrompt</code> function loads the system prompt we defined in the Geminis sheet corresponding the Gemini name chosen by the user in the row.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Helper function to check if a column is filled</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isColumnFilled</span>(<span class=\"hljs-params\">content</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> content !== <span class=\"hljs-literal\">null</span> &amp;&amp; content !== <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// Checks if content is not null and not an empty string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findSystemPrompt</span>(<span class=\"hljs-params\">geminiData, chosenGemini, userQuestion</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; geminiData.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (geminiData[i][<span class=\"hljs-number\">0</span>] === chosenGemini) {\n      <span class=\"hljs-keyword\">return</span> geminiData[i][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">\" Max 50 words. Keep it funny and light-hearted. \"</span> + <span class=\"hljs-string\">\" \\n User: \"</span> + userQuestion + <span class=\"hljs-string\">\" \\n Answer: \"</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Return null if no matching Gemini is found</span>\n}\n</code></pre>\n<h2 id=\"heading-call-gemini-pro-api\">Call Gemini Pro API</h2>\n<p>Duration: 3</p>\n<p>Finally, we'll create the <code>callApi</code> function which makes the call to Gemini Pro API and sets the output in the sheet.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callApi</span>(<span class=\"hljs-params\">prompt</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY'</span>; <span class=\"hljs-comment\">// Replace with your actual API Key</span>\n  <span class=\"hljs-keyword\">var</span> payload = {<span class=\"hljs-string\">\"contents\"</span>:[{<span class=\"hljs-string\">\"parts\"</span>:[{<span class=\"hljs-string\">\"text\"</span>: prompt}]}]};\n  <span class=\"hljs-keyword\">var</span> options = {\n    <span class=\"hljs-string\">\"method\"</span> : <span class=\"hljs-string\">\"post\"</span>,\n    <span class=\"hljs-string\">\"contentType\"</span>: <span class=\"hljs-string\">\"application/json\"</span>,\n    <span class=\"hljs-string\">\"payload\"</span> : <span class=\"hljs-built_in\">JSON</span>.stringify(payload)\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">var</span> response = UrlFetchApp.fetch(url, options);\n    <span class=\"hljs-keyword\">var</span> jsonResponse = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n    <span class=\"hljs-keyword\">return</span> jsonResponse.candidates[<span class=\"hljs-number\">0</span>].content.parts[<span class=\"hljs-number\">0</span>].text;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"API call failed: \"</span> + error.toString();\n  }\n}\n</code></pre>\n<h2 id=\"heading-setup-onedit-trigger\">Setup onEdit trigger</h2>\n<p>Duration: 3</p>\n<p>As a final step, you will have to setup the onEdit trigger to execute every time edits are made to your Google Sheet. Click on the \"clock\" icon on the Apps Script interface to access the triggers section for your Apps Script.</p>\n<p>Add a trigger with the configuration as shown below and click on Save.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707638180473/f6bea87a-0392-42c0-b8c6-35919fbd2a53.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-test-the-integration\">Test the integration</h2>\n<p>Duration: 2</p>\n<p>Now, create a new row in the sheet to test if everything works alright! If all goes well, you should see the Gemini response according to your chosen Gemini in the Response column!</p>\n"},"publishedAt":"2024-02-11T08:01:26.737Z","seo":{"title":null,"description":null},"tags":[{"slug":"blog"},{"slug":"codelab"},{"slug":"ppt"}]},"ogImageUrl":"https://cdn.xpri.dev/covers/65c87ed66bca40ae7db601f3.png"}},"staticQueryHashes":[],"slicesMap":{}}