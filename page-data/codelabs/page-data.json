{"componentChunkName":"component---src-templates-codelabs-index-tsx","path":"/codelabs/","result":{"pageContext":{"labs":[{"node":{"id":"662fa7bce0a1d85565d1c138","slug":"how-much-randomness-do-you-really-need","url":"https://xprilion.com/how-much-randomness-do-you-really-need","title":"How much Randomness do you really need?","subtitle":null,"brief":"tl;dr: This article doesn't tell you how to generate more random numbers, it asks you - do you need it? And also sort of tells you how to generate more random numbers along the way.\nIn a world full of choices, its easy to come across situations where...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/upload/v1714382074222/32b8af14-73ef-472a-a3e0-3d7c8fe29d9f.png"},"content":{"html":"<p>tl;dr: This article doesn't tell you how to generate more random numbers, it asks you - do you need it? And also sort of tells you how to generate more random numbers along the way.</p>\n<p>In a world full of choices, its easy to come across situations where you would want to offload the decision making to something as simple as a coin toss. Sometimes, you could also roll a dice for a large number of options. Or maybe several dices, with the increasing number of choices.</p>\n<p>The learned elite of the <a target=\"_blank\" href=\"https://math.stackexchange.com/\">Math Exchange</a> have some really <a target=\"_blank\" href=\"https://math.stackexchange.com/a/1200650\">good advice on how to generate any size of random numbers by something as simple as rolling a dice several times</a>. At the same time, it can be argued that generating a random number once is not enough, you need to do it several times and make a strategy to pick a number from them or using them.</p>\n<p>I shall not be presenting much of my case for why we need random numbers to be truly random, or how difficult it is to achieve, that has been discussed at length by several tech frontrunners -</p>\n<ol>\n<li><p><a target=\"_blank\" href=\"https://www.kdnuggets.com/2017/06/surprising-complexity-randomness.html\">The Surprising Complexity of Randomness on Kdnuggets</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://qz.com/1642628/cloudflare-uses-lava-lamps-to-generate-a-crucial-resource\">Cloudflare uses lava lamps to generate a fundamental resource: Randomness on QZ</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.cloudflare.com/en-gb/leagueofentropy/\">League of Entropy by Cloudflare</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.americanscientist.org/article/the-quest-for-randomness\">The Quest for Randomness on American Scientist</a></p>\n</li>\n</ol>\n<p>Randomness is a fascinating aspect of both nature and technology. It underpins everything from the evolutionary processes of biology to the algorithms securing our most sensitive digital transactions. But when it comes to integrating randomness into our systems and models, how much do we truly need? And what does it mean for our outcomes?</p>\n<p><img src=\"https://i.imgur.com/uR4WuQ0.gif\" alt=\"Dilbert-Random-Number-Generator\" class=\"image--center mx-auto\" /></p>\n<p>How can we determine the levels of randomness of numbers?</p>\n<h2 id=\"heading-understanding-randomness\">Understanding randomness</h2>\n<p>Randomness comes in various forms, and can be divided into several types of randomness based on how difficult it is for them to be predicted:</p>\n<h3 id=\"heading-level-1-deterministic-sequence\">Level 1: Deterministic sequence</h3>\n<p>Remember the traffic lights at the crossing? The sequence in which the lights change - from green to yellow to red and then back to green - is deterministic. This means the sequence is predefined and follows a set schedule, ensuring that each light phase occurs predictably. This predictability helps manage traffic flow efficiently, prevents accidents, and ensures pedestrians and vehicles can anticipate changes and act accordingly.</p>\n<p><img src=\"https://imgs.xkcd.com/comics/random_number.png\" alt=\"Random Number\" class=\"image--center mx-auto\" /></p>\n<p>At this stage, there is no randomness.</p>\n<p>Any mathematical function with one to one mapping is deterministic in randomness if passed a linear or periodic sequence of inputs.</p>\n<h3 id=\"heading-level-2-pseudo-random-number-generators-prngs\">Level 2: Pseudo-Random Number Generators (PRNGs)</h3>\n<p>Probably the most widely used level of randomness in software development - the psuedo random number generators are the trick behind the random function in almost all major programming languages.</p>\n<p>While PRNGs do not offer better cryptographic security of other possible algorithms, they provide an essential balance between speed, efficiency, and a sufficient level of unpredictability for many practical applications. Their ability to rapidly produce large volumes of pseudo-random numbers underpins a wide range of scientific, industrial, and entertainment applications, making them a fundamental tool in the arsenal of developers and researchers.</p>\n<h3 id=\"heading-level-3-cryptographically-secure-pseudo-random-number-generators-csprngs\">Level 3: Cryptographically Secure Pseudo-Random Number Generators (CSPRNGs)</h3>\n<p>Unlike standard pseudo-random number generators, CSPRNGs are designed to produce sequences of numbers that are not only pseudo-random but also fulfill stringent cryptographic security criteria. This means that the numbers they generate cannot be feasibly predicted by attackers, even with knowledge of the generator's workings and prior outputs, making them indispensable in a variety of security-sensitive applications.</p>\n<p>When you log into a website, the session management system generates a unique session token using a CSPRNG. This token is a large random number that serves as a temporary identity for your session. Because CSPRNGs ensure that these numbers are unpredictable, it becomes extremely difficult for attackers to hijack your session by guessing the token, thereby safeguarding your data and interactions with the site.</p>\n<p>One of the most critical uses of CSPRNGs is in the generation of encryption keys. Whether for symmetric or asymmetric encryption, the strength of the encryption largely depends on the unpredictability of the key. CSPRNGs ensure that encryption keys are generated in a manner that makes them hard to predict, thus fortifying the encryption against attacks. Many authentication protocols require random challenges or tokens to be generated as part of the authentication process. CSPRNGs are used to produce these tokens to ensure they cannot be predicted by an attacker, thus securing the authentication mechanism.</p>\n<h3 id=\"heading-level-4-true-random-number-generators-trngs\">Level 4: True Random Number Generators (TRNGs)</h3>\n<p>True Random Number Generators (TRNGs) utilize fundamentally unpredictable physical processes to generate numbers. Unlike their pseudo-random counterparts, TRNGs do not rely on algorithms but instead on inherent randomness found in natural phenomena. This level of randomness is crucial in applications where the highest degree of unpredictability is required, such as in high-security cryptographic environments. For instance, the Lava lamps used by the good folk at Cloudflare!</p>\n<p>TRNGs are the gold standard when absolute randomness is required. By relying on unpredictable physical processes, they provide a level of security and fairness that pseudo-random number generators cannot match.</p>\n<p>Go check out <a target=\"_blank\" href=\"https://developers.cloudflare.com/randomness-beacon/\">Cloudflare Randomness Beacon</a> - drand for a state of the art TRNG implementation - <a target=\"_blank\" href=\"https://drand.love/\">https://drand.love/</a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1714395090796/5b52fd1b-5446-4b79-bdef-b4b47b6bd177.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>True randomness - unpredictable and without patterns - has a mystical quality in science and engineering. However, running TRNGs is not a trivial task. It requires sophisticated hardware solutions to be running 24x7, failure-proof and without environmental bias.</p>\n<p>In contrast to true randomness, PRNGs are much easier. While the sequences are not genuinely random because they are initialized with a 'seed' and will repeat their sequence if the seed is reused. Yet, for most applications, from simulations to video games, pseudo-randomness suffices. It's easier to generate, replicate, and test, which makes it incredibly valuable in software development.</p>\n<h2 id=\"heading-understanding-hash-collision\">Understanding Hash Collision</h2>\n<p>A lot of requirements of randomness in software development are around generating unique hashes. That's where you try to come up with a string that when you put into your database, maybe as a unique identifier of a resource or a key, you want it to work without you having to explicitly check if its not already present in the database. Historically, using hash functions has worked out pretty well for this. However, there are times when the output of the hash function isn't unique and that's where the problem of Hash collision starts.</p>\n<p>A hash collision occurs when two distinct inputs - like different files or data strings - are processed through a hash function and, surprise, they end up with the same hash value. It's as if two completely different paths unexpectedly lead you to the same destination.</p>\n<p>In a perfect world, a hash function would give each unique input a unique hash, but due to the limitations of mathematics and the finite nature of hash values, collisions are theoretically possible. Think of it like this: if you're assigning a unique number to every star in the sky using a finite number of digits, eventually, you'll run out of numbers and have to repeat one.</p>\n<p>Now, why should you care? In contexts where hashes are used to verify the integrity of data or authenticate information, a collision can be exploited to deceive systems into accepting a malicious file in place of a legitimate one. This vulnerability can be a real Achilles' heel in cybersecurity.</p>\n<p><img src=\"https://i.imgflip.com/8oefha.jpg\" alt class=\"image--center mx-auto\" /></p>\n<p>PS: The above meme is based on experiment by Nat McHugh published on their blog: <a target=\"_blank\" href=\"https://natmchugh.blogspot.com/2015/02/create-your-own-md5-collisions.html\">Create your own md5 hash collision</a>.</p>\n<p>This is why, in the realm of cryptographic security, choosing robust hash functions, those with a lower likelihood of collisions, is crucial. MD5, once a poster child of hash functions, has shown its age and vulnerability, pushing the digital world towards more secure alternatives like SHA-256 or SHA-3.</p>\n<h2 id=\"heading-randomness-by-use-case\">Randomness by use case</h2>\n<p>You don't really always need a lot of randomness in your regular developer life. Let's walk you through some calculations -</p>\n<h3 id=\"heading-unique-system-assigned-usernames\">Unique System Assigned Usernames</h3>\n<p>Some applications designate system generated random usernames to their users on sign up, which the user may or may not be able to change later. For such systems, its important to have good randomness in place to ensure that each username is unique without needing manual/automated intervention.</p>\n<h4 id=\"heading-general-strategy\">General strategy:</h4>\n<p>Using a pseudo-random generator can suffice, combining a predictable element (like a timestamp or user initials) with a randomly generated number or string. This provides a balance between uniqueness and simplicity, avoiding the need for high-level security measures that true randomness would entail.</p>\n<h4 id=\"heading-my-strategy\">My strategy:</h4>\n<p>When working on such systems, I've usually utilized the user's email along with the unix timestamp in the following manner -</p>\n<ol>\n<li><p>Strip the email of all special characters</p>\n</li>\n<li><p>Hash it through md5 (yes, even though its not collision-proof)</p>\n</li>\n<li><p>Append the current timestamp.</p>\n</li>\n</ol>\n<p>You might wonder, why did I use md5 even though I've trolled it in the previous section? The answer lies in the question - what is the probability of two users signing up on my website with emails that can cause the md5 function to produce the same hash at the same Unix timestamp?</p>\n<p>For the fun of it, I let ChatGPT have a go at answering that.</p>\n<p><strong>Collision Calculation</strong></p>\n<p>Assuming each registration event is independent, the probability (P) that any two given hashes collide (i.e., are identical) under ideal conditions is</p>\n<p>$$\\frac{1}{2^{128}}$$</p><p>However, the introduction of the timestamp complicates direct collisions since both the hashed content (email) and the exact second of registration must match.</p>\n<p><strong>Step-by-step calculation:</strong></p>\n<ol>\n<li><p><strong>Probability of same timestamp:</strong> Let's assume your site has (N) users registering in a day (86,400 seconds). If user registrations are uniformly distributed (which they typically are not, but we'll assume for simplicity), the probability (p_t) that two users register in the same second is ( \\frac{1}{86400} ).</p>\n</li>\n<li><p><strong>Probability of MD5 collision:</strong> Even under conditions where two emails could hash to the same value, the actual observed incidence of MD5 collisions in non-adversarial contexts is exceedingly low. Conservatively, let’s assume the probability (p_m) of any two random strings producing the same MD5 hash is much less than the theoretical ( \\frac{1}{2^{128}} ) due to MD5's vulnerabilities. A rough estimate might place it around ( \\frac{1}{2^{64}} ) given practical considerations and known weaknesses.</p>\n</li>\n<li><p><strong>Combined probability:</strong> The combined probability (P) that two users have the same hash and register at the exact same second is roughly ( p_t \\times p_m = \\frac{1}{86400} \\times \\frac{1}{2^{64}} ).</p>\n</li>\n</ol>\n<p><strong>Numeric approximation:</strong></p>\n<p>Given that</p>\n<p>$$2^{64} \\approx 1.84 \\times 10^{19}$$</p><p>and</p>\n<p>$$86400 \\approx 8.64 \\times 10^{4}$$</p><p>the probability becomes:</p>\n<p>$$P \\approx \\frac{1}{8.64 \\times 10^{4} \\times 1.84 \\times 10^{19}} \\approx \\frac{1}{1.59 \\times 10^{24}}$$</p><p>This probability is astronomically low, indicating that under normal circumstances (non-adversarial), the likelihood of a collision from two users signing up in the same second with a colliding MD5 hash is virtually nil.</p>\n"},"publishedAt":"2024-04-29T13:59:24.656Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"}]}},{"node":{"id":"65c87ed66bca40ae7db601f3","slug":"build-a-google-gemini-pro-store-with-google-sheets","url":"https://xprilion.com/build-a-google-gemini-pro-store-with-google-sheets","title":"Build a Gemini Store with Google Sheets","subtitle":"Giving personalities to your Gemini APIs via Gemini Store in Google Sheets","brief":"Overview\nDuration: 1\nHave you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you c...","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/GLg0z5z8EQU/upload/fa2ab8a93c2bfbf4eb1abe5d5b261f9f.jpeg"},"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Have you ever been in a situation where you had to qualitatively analyse a large amount of data on a spreadsheet and you wished for someone to take away your pain? With Google's Gemini running directly in your Google Sheets you can now have a super smart AI assistant do the grind work for you!</p>\n<p>In this article, we'll cover a very simple way of giving personalities or specific roles to your Gemini powered API calls via the simple and popular interface of Google Sheets!</p>\n<p>Here's a screen recording of what we're building:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://youtu.be/KqUNS9WoMkQ\">https://youtu.be/KqUNS9WoMkQ</a></div>\n<p> </p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>Access to a Google Account</p>\n</li>\n<li><p>Access to Google's Gemini Pro APIs via Google AI Studio</p>\n</li>\n</ol>\n<h2 id=\"heading-architecture\">Architecture</h2>\n<p>Duration: 2</p>\n<p>We'll be building our product's architecture in the following manner:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707635641736/de16e03a-935f-4081-b616-c81b5fe4b520.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The Google Sheets will interact on every edit operation with the associated Apps Script for that Sheet which in turn talks to the Gemini Pro API. We'll be using the Gemini Pro API via the Google AI Studio in order to get some free API calls at the cost of being non-production ready. However, you can use Gemini Pro APIs via Vertex AI for production workloads.</p>\n<h2 id=\"heading-get-the-gemini-api-key\">Get the Gemini API Key</h2>\n<p>Duration: 3</p>\n<p>Now, let's get an API Key to access the Gemini Pro APIs.</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://makersuite.google.com/\">Google AI Studio</a></p>\n</li>\n<li><p>Click on <a target=\"_blank\" href=\"https://makersuite.google.com/app/apikey\">Get API Key</a></p>\n</li>\n<li><p>Follow the steps provided on the page to generate an API Key. Store the key safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setup-your-google-sheet\">Setup your Google Sheet</h2>\n<p>Duration: 5</p>\n<p>Let us setup your Google Sheet to work like a Gemini Store. To do so, we'll create a second sheet in the default Google Sheet document titled \"Geminis\".</p>\n<p>Fill the following data in this sheet (only for example, you can change as per your wish):</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>name</td><td>sys prompt</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Pilot Gemini</td><td>Drawing on your extensive experience as a seasoned pilot, how would you explain or advise on the following aviation-related query? Use a lot of Pilot terms!</td></tr>\n<tr>\n<td>Pirate Gemini</td><td>As a legendary pirate who has sailed the seven seas, how would you respond to this inquiry with your adventurous spirit and nautical knowledge? Reply in pirate language only.</td></tr>\n<tr>\n<td>Techie Gemini</td><td>As a tech enthusiast with a passion for the latest gadgets and innovations, how would you explain or solve this technology-related problem? Use techie terms!</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-setup-your-apps-script\">Setup your Apps Script</h2>\n<p>Duration: 3</p>\n<p>We will now create the AppScript code to interface between Google Sheets and the Gemini Pro API.</p>\n<ol>\n<li><p>Create a new Google Sheet and create the following columns in it: <code>GeminiName</code>, <code>Query</code>, <code>Response</code>.</p>\n</li>\n<li><p>In your Google Sheet, Click on <code>Extensions &gt; Apps Script</code></p>\n</li>\n<li><p>We'll be editing the <code>Code.gs</code> file. Remove the current contents of this file and head to the next step!</p>\n</li>\n</ol>\n<h2 id=\"heading-listen-to-onedit-changes-to-the-sheet\">Listen to onEdit changes to the sheet</h2>\n<p>Duration: 3</p>\n<p>In your <code>Code.gs</code> file, add the following function which listens to each edit on the Google Sheet and decides if it needs to perform any action on it.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onEdit</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> formResponsesSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Sheet1'</span>); <span class=\"hljs-comment\">// Use getSheetByName for clarity</span>\n  <span class=\"hljs-keyword\">var</span> editedRow = e.range.getRow();\n\n  <span class=\"hljs-comment\">// Avoid running on header row or rows beyond the last content row</span>\n  <span class=\"hljs-keyword\">if</span> (editedRow === <span class=\"hljs-number\">1</span> || editedRow &gt; formResponsesSheet.getLastRow()) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if the edit is in the header or beyond the last content row</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> rowData = formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>).getValues()[<span class=\"hljs-number\">0</span>];\n\n  <span class=\"hljs-comment\">// Check if all required columns are filled (columns 1 to 7, excluding 'Response')</span>\n  <span class=\"hljs-keyword\">if</span> (!rowData.every(isColumnFilled)) {\n    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// Exit if not all required fields are filled</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> chosenGemini = rowData[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 'Choose your Gemini' is the third column</span>\n  <span class=\"hljs-keyword\">var</span> userQuestion = rowData[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 'Say/Ask something' is the fourth column</span>\n\n  <span class=\"hljs-keyword\">var</span> geminisSheet = e.source.getSheetByName(<span class=\"hljs-string\">'Geminis'</span>);\n  <span class=\"hljs-keyword\">var</span> geminiData = geminisSheet.getRange(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, geminisSheet.getLastRow() - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>).getValues();\n\n  <span class=\"hljs-keyword\">var</span> systemPrompt = findSystemPrompt(geminiData, chosenGemini, userQuestion);\n\n  <span class=\"hljs-keyword\">if</span> (systemPrompt) {\n    <span class=\"hljs-keyword\">var</span> apiResponse = callApi(systemPrompt);\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(apiResponse); <span class=\"hljs-comment\">// Assuming 'Response' is in the 8th column</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    formResponsesSheet.getRange(editedRow, <span class=\"hljs-number\">2</span>).setValue(<span class=\"hljs-string\">\"Error: Gemini not found or other error occurred.\"</span>);\n  }\n}\n</code></pre>\n<h2 id=\"heading-create-helper-functions\">Create Helper functions</h2>\n<p>Duration: 3</p>\n<p>Now, let's setup two helper functions to work with the script. The <code>isColumnFilled</code> function checks if that row is full before trying to hit the Gemini API. The <code>findSystemPrompt</code> function loads the system prompt we defined in the Geminis sheet corresponding the Gemini name chosen by the user in the row.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Helper function to check if a column is filled</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isColumnFilled</span>(<span class=\"hljs-params\">content</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> content !== <span class=\"hljs-literal\">null</span> &amp;&amp; content !== <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// Checks if content is not null and not an empty string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findSystemPrompt</span>(<span class=\"hljs-params\">geminiData, chosenGemini, userQuestion</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; geminiData.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (geminiData[i][<span class=\"hljs-number\">0</span>] === chosenGemini) {\n      <span class=\"hljs-keyword\">return</span> geminiData[i][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">\" Max 50 words. Keep it funny and light-hearted. \"</span> + <span class=\"hljs-string\">\" \\n User: \"</span> + userQuestion + <span class=\"hljs-string\">\" \\n Answer: \"</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Return null if no matching Gemini is found</span>\n}\n</code></pre>\n<h2 id=\"heading-call-gemini-pro-api\">Call Gemini Pro API</h2>\n<p>Duration: 3</p>\n<p>Finally, we'll create the <code>callApi</code> function which makes the call to Gemini Pro API and sets the output in the sheet.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callApi</span>(<span class=\"hljs-params\">prompt</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY'</span>; <span class=\"hljs-comment\">// Replace with your actual API Key</span>\n  <span class=\"hljs-keyword\">var</span> payload = {<span class=\"hljs-string\">\"contents\"</span>:[{<span class=\"hljs-string\">\"parts\"</span>:[{<span class=\"hljs-string\">\"text\"</span>: prompt}]}]};\n  <span class=\"hljs-keyword\">var</span> options = {\n    <span class=\"hljs-string\">\"method\"</span> : <span class=\"hljs-string\">\"post\"</span>,\n    <span class=\"hljs-string\">\"contentType\"</span>: <span class=\"hljs-string\">\"application/json\"</span>,\n    <span class=\"hljs-string\">\"payload\"</span> : <span class=\"hljs-built_in\">JSON</span>.stringify(payload)\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">var</span> response = UrlFetchApp.fetch(url, options);\n    <span class=\"hljs-keyword\">var</span> jsonResponse = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n    <span class=\"hljs-keyword\">return</span> jsonResponse.candidates[<span class=\"hljs-number\">0</span>].content.parts[<span class=\"hljs-number\">0</span>].text;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"API call failed: \"</span> + error.toString();\n  }\n}\n</code></pre>\n<h2 id=\"heading-setup-onedit-trigger\">Setup onEdit trigger</h2>\n<p>Duration: 3</p>\n<p>As a final step, you will have to setup the onEdit trigger to execute every time edits are made to your Google Sheet. Click on the \"clock\" icon on the Apps Script interface to access the triggers section for your Apps Script.</p>\n<p>Add a trigger with the configuration as shown below and click on Save.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1707638180473/f6bea87a-0392-42c0-b8c6-35919fbd2a53.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-test-the-integration\">Test the integration</h2>\n<p>Duration: 2</p>\n<p>Now, create a new row in the sheet to test if everything works alright! If all goes well, you should see the Gemini response according to your chosen Gemini in the Response column!</p>\n"},"publishedAt":"2024-02-11T08:01:26.737Z","seo":{"title":null,"description":null},"tags":[{"slug":"blog"},{"slug":"codelab"},{"slug":"ppt"}]}},{"node":{"id":"65ab3675458f6539ae16ff5d","slug":"google-cloud-run-python-flask-example-lab","url":"https://xprilion.com/google-cloud-run-python-flask-example-lab","title":"Google Cloud Run example using Python Flask","subtitle":"An example of deploying a Python Flask application to Google Cloud Run.","brief":"Overview\nDuration: 1\nHey there!\nThis codelab will walk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.\nRequirements\nDuration: 2\nIn order to follow this codelab, you'll ne...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>This codelab will walk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account.</p>\n</li>\n<li><p>Google Cloud CLI installed and initialized.</p>\n</li>\n<li><p>Python installed locally.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-account\">Setting Up Your Google Cloud Account</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> and create an account.</p>\n</li>\n<li><p>Enable billing</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n</ol>\n<h2 id=\"heading-install-google-cloud-cli\">Install Google Cloud CLI</h2>\n<p>Duration: 5</p>\n<p>Follow the official guide to install the Google Cloud CLI: <a target=\"_blank\" href=\"https://cloud.google.com/sdk/docs/install\">Installing Google Cloud SDK</a>.</p>\n<h2 id=\"heading-create-and-run-the-flask-application\">Create and Run the Flask Application</h2>\n<p>Duration: 15</p>\n<ol>\n<li><p>Set up a new directory for your project:</p>\n<pre><code class=\"lang-bash\"> mkdir hello-world-cloud-run\n <span class=\"hljs-built_in\">cd</span> hello-world-cloud-run\n</code></pre>\n</li>\n<li><p>Create a Python virtual environment and activate it:</p>\n<pre><code class=\"lang-bash\"> python3 -m venv .venv\n <span class=\"hljs-built_in\">source</span> .venv/bin/activate\n</code></pre>\n</li>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Create a file named <a target=\"_blank\" href=\"http://main.py\"><code>main.py</code></a> with the following content:</p>\n<pre><code class=\"lang-python\"> <span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n <span class=\"hljs-keyword\">import</span> os\n\n app = Flask(__name__)\n\n<span class=\"hljs-meta\"> @app.route('/')</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n <span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n     app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-running-the-app-locally\">Running the App Locally</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application locally:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see the \"Hello, World!\" message.</p>\n</li>\n</ol>\n<h2 id=\"heading-deploy-to-google-cloud-run\">Deploy to Google Cloud Run</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Generate the requirements.txt file</p>\n<pre><code class=\"lang-bash\"> pip list --format=freeze &gt; requirements.txt\n</code></pre>\n</li>\n<li><p>Deploy your application to Google Cloud Run:</p>\n<pre><code class=\"lang-bash\"> gcloud run deploy\n</code></pre>\n</li>\n<li><p>Wait for the deployment to complete. You will receive a URL where your application is live.</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple application on Google Cloud Run using Python and Flask!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with adding more routes and functionalities to your Flask application.</p>\n</li>\n<li><p>Learn more about managing and monitoring your applications on Google Cloud Run.</p>\n</li>\n<li><p>Explore other Google Cloud services that can enhance your application.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-19T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"}]}},{"node":{"id":"65ab370776b1ae2023868a88","slug":"gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","url":"https://xprilion.com/gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","title":"Python Flask app with Gemini Pro Vision Multimodal","subtitle":"A starter example of using Gemini AI Pro Vision Multimodal model via Google AI Studio (formerly MakerSuite).","brief":"Overview\nDuration: 1\nHey there!\nIn this codelab, you'll explore building a Python Flask application that leverages Gemini Pro Vision Multimodal's capabilities to perform tasks like image classification, object detection, and text understanding. By th...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>In this codelab, you'll explore building a Python Flask application that leverages Gemini Pro Vision Multimodal's capabilities to perform tasks like image classification, object detection, and text understanding. By the end, you'll have a practical understanding of integrating Gemini Pro Vision into your backend applications.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A development environment with Python 3.7 or above installed.</p>\n</li>\n<li><p>Access to terminal/shell for executing commands.</p>\n</li>\n<li><p>Basic understanding of Python and Flask</p>\n</li>\n<li><p>Familiarity with REST APIs is helpful but not mandatory</p>\n</li>\n<li><p>Access to a Gemini Pro Vision model</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-dev-environment\">Setting Up Your Dev Environment</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Log in to your <a target=\"_blank\" href=\"https://makersuite.google.com/\">Google AI Studio</a> account.</p>\n</li>\n<li><p>Create a new <code>API KEY</code>.</p>\n</li>\n<li><p>Note the API Key in a secure location.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-local-environment\">Setting Up Your Local Environment</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Install other required libraries:</p>\n<pre><code class=\"lang-bash\"> pip install marko google-generativeai\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-write-the-driving-code\">Write the driving code</h2>\n<p>Duration: 10</p>\n<ol>\n<li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, Response, g, render_template, jsonify\n<span class=\"hljs-keyword\">import</span> marko\n<span class=\"hljs-keyword\">import</span> google.generativeai <span class=\"hljs-keyword\">as</span> genai\n</code></pre>\n<ol>\n<li><strong>Initializing the App and Gemini API</strong>: We initialize our Flask app and load the Gemini API client.</li>\n</ol>\n<pre><code class=\"lang-python\">genai.configure(api_key=os.getenv(<span class=\"hljs-string\">\"API_KEY\"</span>))\n\napp = Flask(__name__)\napp.debug = <span class=\"hljs-literal\">True</span>\n\nconfig = {\n  <span class=\"hljs-string\">'temperature'</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">'top_k'</span>: <span class=\"hljs-number\">20</span>,\n  <span class=\"hljs-string\">'top_p'</span>: <span class=\"hljs-number\">0.9</span>,\n  <span class=\"hljs-string\">'max_output_tokens'</span>: <span class=\"hljs-number\">500</span>\n}\n</code></pre>\n<p>We also need to confiugre the security settings for the model output:</p>\n<pre><code class=\"lang-python\">safety_settings = [\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_HARASSMENT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_HATE_SPEECH\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_DANGEROUS_CONTENT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  }\n]\n\nmodel = genai.GenerativeModel(model_name=<span class=\"hljs-string\">\"gemini-pro-vision\"</span>,\n                              generation_config=config,\n                              safety_settings=safety_settings)\n</code></pre>\n<ol>\n<li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-meta\">@app.route('/', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"chat.html\"</span>)\n\n<span class=\"hljs-meta\">@app.route('/chat', methods=['POST'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>():</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'user_image'</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> request.files:\n        <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"No file part\"</span>})\n\n    file = request.files[<span class=\"hljs-string\">'user_image'</span>]\n\n    <span class=\"hljs-keyword\">if</span> file.filename == <span class=\"hljs-string\">''</span>:\n        <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"No selected file\"</span>})\n\n    <span class=\"hljs-keyword\">if</span> file:\n        image_data = file.read()\n        image_parts = [\n            {\n                <span class=\"hljs-string\">\"mime_type\"</span>: file.content_type,\n                <span class=\"hljs-string\">\"data\"</span>: image_data\n            },\n        ]\n\n        prompt_parts = [\n            <span class=\"hljs-string\">\"You are Sheldon Cooper. User will upload an image. Based on the image, you have to come up with a Sheldon Cooper style fun fact. Also give a funny, sarcastic note about the image. \\n\\nUser's image:\\n\\n\"</span>,\n            image_parts[<span class=\"hljs-number\">0</span>],\n            <span class=\"hljs-string\">\"\\n\\nFun fact:\\n\"</span>,\n        ]    \n\n        response = model.generate_content(prompt_parts)\n\n        <span class=\"hljs-keyword\">return</span> jsonify({\n            <span class=\"hljs-string\">\"response\"</span>: marko.convert(response.text)\n        })\n</code></pre>\n<p>Finally, we'll add the entrypoint for the file which runs the Flask development server.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n<p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p>\n<h2 id=\"heading-ui-for-the-application\">UI for the application</h2>\n<p>Duration: 10</p>\n<p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-box\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-light p-3 mb-3 rounded\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border-left: 4px solid #43a047;\"</span>&gt;</span>Hi, I am Sheldon Cooper. Upload an image and I will tell you a fun fact.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-bar\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Updated form to include file upload --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-form\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group mb-3\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"image-input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"send-button\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Upload<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Then, let's add some JavaScript to the page for interactivity:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">appendImageToChat</span>(<span class=\"hljs-params\">file</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> reader = <span class=\"hljs-keyword\">new</span> FileReader();\n\n    reader.onloadend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> img = $(<span class=\"hljs-string\">'&lt;img&gt;'</span>).attr(<span class=\"hljs-string\">'src'</span>, reader.result).css({<span class=\"hljs-string\">'max-width'</span>: <span class=\"hljs-string\">'100%'</span>, <span class=\"hljs-string\">'height'</span>: <span class=\"hljs-string\">'auto'</span>});\n        $(<span class=\"hljs-string\">'#chat-box'</span>).append($(<span class=\"hljs-string\">'&lt;blockquote&gt;'</span>).css({<span class=\"hljs-string\">'border-left'</span>: <span class=\"hljs-string\">'4px solid dodgerblue'</span>}).append(img));\n    }\n\n    <span class=\"hljs-keyword\">if</span> (file) {\n        reader.readAsDataURL(file);\n    }\n}\n\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    $(<span class=\"hljs-string\">'#chat-form'</span>).submit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        e.preventDefault(); <span class=\"hljs-comment\">// Prevent the default form submission</span>\n\n        <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData(<span class=\"hljs-built_in\">this</span>);\n        <span class=\"hljs-keyword\">var</span> fileInput = $(<span class=\"hljs-string\">'#image-input'</span>)[<span class=\"hljs-number\">0</span>].files[<span class=\"hljs-number\">0</span>];\n\n        formData.append(<span class=\"hljs-string\">'user_image'</span>, fileInput);\n\n        <span class=\"hljs-keyword\">if</span> (fileInput) {\n            $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #1288ff;\"&gt;User: &lt;/blockquote&gt;'</span>);\n            appendImageToChat(fileInput);\n            $(<span class=\"hljs-string\">'#image-input'</span>).val(<span class=\"hljs-string\">''</span>);\n            $(<span class=\"hljs-string\">'#progress-bar'</span>).show();\n\n            <span class=\"hljs-comment\">// Use AJAX to send the formData to the server</span>\n            $.ajax({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/chat'</span>,\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'POST'</span>,\n                <span class=\"hljs-attr\">data</span>: formData,\n                <span class=\"hljs-attr\">processData</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Prevent jQuery from converting the data into a query string</span>\n                <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Set content type to false as jQuery will tell the server its a query string request</span>\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #43a047;\"&gt;Sheldon: '</span> + data.response + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                },\n                <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Sheldon: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                }\n            });\n        }\n    });\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"heading-running-the-app\">Running the App</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Set the <code>API_KEY</code> as environment variable in the terminal:</p>\n<pre><code class=\"lang-bash\"> <span class=\"hljs-built_in\">export</span> API_KEY=your_api_key\n</code></pre>\n</li>\n<li><p>Run your application:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</p>\n</li>\n</ol>\n<h2 id=\"heading-interacting-with-your-chatbot\">Interacting with Your Chatbot</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>The bot will greet you asking you to provide an image.</p>\n</li>\n<li><p>Upload a JPG/PNG below 1MB to the interface and click Upload.</p>\n</li>\n<li><p>The chatbot will respond with a fun fact about the image!</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a software powered by Google's Gemini AI! This bot acts like Sheldon Cooper and provides facts about user's uploaded images!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with different model parameters to see how they affect the output.</p>\n</li>\n<li><p>Try integrating this chatbot into a larger web application.</p>\n</li>\n<li><p>Explore other capabilities of Gemini AI.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-16T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"}]}},{"node":{"id":"65ab597a71622f998db313c4","slug":"vertexai-palm-api-introduction-python-lab","url":"https://xprilion.com/vertexai-palm-api-introduction-python-lab","title":"Introduction to Building Solutions with PaLM2 API via VertexAI on GCP","subtitle":"A starter guide to building innovative solutions with PaLM2 API via Vertex AI on GCP.","brief":"Overview\nDuration: 1\nHey there!\nIn this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is t...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>In this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is thinking and the bot will respond with hints about what it is thinking and how far away your guess is from the correct item.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account with active billing.</p>\n</li>\n<li><p>A development environment with Python 3.7 or above installed.</p>\n</li>\n<li><p>Access to terminal/shell for executing commands.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-environment\">Setting Up Your Google Cloud Environment</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Log in to your <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> account.</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n<li><p>Enable <a target=\"_blank\" href=\"https://cloud.google.com/billing/docs/how-to/modify-project\">billing for the project</a>.</p>\n</li>\n<li><p>Navigate to the <a target=\"_blank\" href=\"https://console.cloud.google.com/apis/dashboard\">APIs &amp; Services dashboard</a> and enable the Vertex AI API.</p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://cloud.google.com/iam/docs/keys-create-delete\">Create a service account and download the JSON key file</a> (<code>key.json</code>). Store this file safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-local-environment\">Setting Up Your Local Environment</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Install other required libraries:</p>\n<pre><code class=\"lang-bash\"> pip install marko google-cloud-aiplatform\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-write-the-driving-code\">Write the driving code</h2>\n<p>Duration: 10</p>\n<ol>\n<li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, Response, g, render_template, jsonify\n<span class=\"hljs-keyword\">import</span> marko\n<span class=\"hljs-keyword\">import</span> vertexai\n<span class=\"hljs-keyword\">from</span> vertexai.language_models <span class=\"hljs-keyword\">import</span> TextGenerationModel\n</code></pre>\n<ol>\n<li><strong>Initializing the App and Vertex AI</strong>: We initialize our Flask app and configure Vertex AI with our GCP project details.</li>\n</ol>\n<pre><code class=\"lang-python\">\napp = Flask(__name__)\napp.debug = <span class=\"hljs-literal\">True</span>\n\nvertexai.init(project=<span class=\"hljs-string\">\"project-x\"</span>, location=<span class=\"hljs-string\">\"us-central1\"</span>)\nparameters = {\n    <span class=\"hljs-string\">\"temperature\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">\"max_output_tokens\"</span>: <span class=\"hljs-number\">256</span>,\n    <span class=\"hljs-string\">\"top_p\"</span>: <span class=\"hljs-number\">0.8</span>,\n    <span class=\"hljs-string\">\"top_k\"</span>: <span class=\"hljs-number\">40</span>\n}\n\nmodel = TextGenerationModel.from_pretrained(<span class=\"hljs-string\">\"text-bison@001\"</span>)\n</code></pre>\n<ol>\n<li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-meta\">@app.route('/', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"chat.html\"</span>)\n\n<span class=\"hljs-meta\">@app.route('/chat/&lt;guess&gt;/&lt;actual&gt;', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>(<span class=\"hljs-params\">guess, actual</span>):</span>\n    response = model.predict(\n        <span class=\"hljs-string\">\"You are the bot in a guessing game where the player tries to guess a secret item you are thinking about. \"</span> +\n        <span class=\"hljs-string\">\"The rules of the game are: 1. the player will make a guess. 2. if the guess is correct or very close to the correct answer, you will say, 'Congratulations, you've got it right!' \"</span> +\n         <span class=\"hljs-string\">\"3. If they are not very close to the actual item, respond with a humorous remark about their guess. Then without mentioning the actual item, \"</span> + actual + <span class=\"hljs-string\">\", provide a subtle hint to guide the player closer to the secret item.\"</span> +\n        <span class=\"hljs-string\">\"The player has just guessed \"</span> + guess + <span class=\"hljs-string\">\".\"</span>,\n        **parameters\n    )\n\n    <span class=\"hljs-keyword\">return</span> jsonify({\n        <span class=\"hljs-string\">\"response\"</span>: marko.convert(response.text)\n    })\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n<p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p>\n<h2 id=\"heading-ui-for-the-application\">UI for the application</h2>\n<p>Duration: 10</p>\n<p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-box\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-light p-3 mb-3 rounded\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border-left: 4px solid #43a047;\"</span>&gt;</span>Bot: Can you guess what am I thinking?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-bar\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Type your message...\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group-append\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"send-button\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Guess<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"quit-button\"</span>&gt;</span>Give Up<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> items = [\n    <span class=\"hljs-string\">\"Eiffel Tower\"</span>,\n    <span class=\"hljs-string\">\"Pineapple\"</span>,\n    <span class=\"hljs-comment\">// ... many more!</span>\n    <span class=\"hljs-string\">\"Rubik's Cube\"</span>,\n    <span class=\"hljs-string\">\"Bamboo\"</span>\n];\n\n    <span class=\"hljs-keyword\">var</span> actual_item = items[<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*items.length)];\n\n    $(<span class=\"hljs-string\">'#chat-input'</span>).keypress(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">if</span>(e.which == <span class=\"hljs-number\">13</span>) { <span class=\"hljs-comment\">// 13 is the Enter key</span>\n            $(<span class=\"hljs-string\">'#send-button'</span>).click();\n        }\n    });\n\n    $(<span class=\"hljs-string\">'#quit-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: The answer was '</span> + actual_item + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#send-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#quit-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n    });\n\n    $(<span class=\"hljs-string\">'#send-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-string\">'#chat-input'</span>).val().trim();\n        <span class=\"hljs-keyword\">if</span> (input !== <span class=\"hljs-string\">''</span>) {\n            $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid dodgerblue;\"&gt;User: '</span> + input + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n            $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n            $(<span class=\"hljs-string\">'#progress-bar'</span>).show();\n            <span class=\"hljs-comment\">// Use AJAX to send the input to the server and get a response</span>\n            $.ajax({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/chat/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(input) + <span class=\"hljs-string\">'/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(actual_item),\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'GET'</span>,\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #43a047;\"&gt;Bot: '</span> + data.response + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                },\n                <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                }\n            });\n        }\n    });\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"heading-running-the-app\">Running the App</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</p>\n</li>\n</ol>\n<h2 id=\"heading-interacting-with-your-chatbot\">Interacting with Your Chatbot</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>The bot will greet you asking you to guess what the bot is thinking about.</p>\n</li>\n<li><p>Enter a guess in the chat interface.</p>\n</li>\n<li><p>The chatbot will respond with if your guess was close to what the actual secret item it was thinking about!</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple chatbot using Flask and Google Cloud's Vertex AI. This bot plays a guessing game with the users!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with different model parameters to see how they affect the output.</p>\n</li>\n<li><p>Try integrating this chatbot into a larger web application.</p>\n</li>\n<li><p>Explore other capabilities of Vertex AI.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-08T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"},{"slug":"gcp"}]}}]}},"staticQueryHashes":[],"slicesMap":{}}