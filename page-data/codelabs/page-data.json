{"componentChunkName":"component---src-templates-codelabs-index-tsx","path":"/codelabs/","result":{"pageContext":{"labs":[{"node":{"id":"65ab3675458f6539ae16ff5d","slug":"google-cloud-run-python-flask-example-lab","url":"https://xprilion.com/google-cloud-run-python-flask-example-lab","title":"Google Cloud Run example using Python Flask","subtitle":"An example of deploying a Python Flask application to Google Cloud Run.","brief":"Overview\nDuration: 1\nHey there!\nThis codelab will walk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.\nRequirements\nDuration: 2\nIn order to follow this codelab, you'll ne...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>This codelab will walk you through the process of creating a simple \"Hello World\" application using Python Flask and deploying it to Google Cloud Run.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account.</p>\n</li>\n<li><p>Google Cloud CLI installed and initialized.</p>\n</li>\n<li><p>Python installed locally.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-account\">Setting Up Your Google Cloud Account</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Head over to <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> and create an account.</p>\n</li>\n<li><p>Enable billing</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n</ol>\n<h2 id=\"heading-install-google-cloud-cli\">Install Google Cloud CLI</h2>\n<p>Duration: 5</p>\n<p>Follow the official guide to install the Google Cloud CLI: <a target=\"_blank\" href=\"https://cloud.google.com/sdk/docs/install\">Installing Google Cloud SDK</a>.</p>\n<h2 id=\"heading-create-and-run-the-flask-application\">Create and Run the Flask Application</h2>\n<p>Duration: 15</p>\n<ol>\n<li><p>Set up a new directory for your project:</p>\n<pre><code class=\"lang-bash\"> mkdir hello-world-cloud-run\n <span class=\"hljs-built_in\">cd</span> hello-world-cloud-run\n</code></pre>\n</li>\n<li><p>Create a Python virtual environment and activate it:</p>\n<pre><code class=\"lang-bash\"> python3 -m venv .venv\n <span class=\"hljs-built_in\">source</span> .venv/bin/activate\n</code></pre>\n</li>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Create a file named <a target=\"_blank\" href=\"http://main.py\"><code>main.py</code></a> with the following content:</p>\n<pre><code class=\"lang-python\"> <span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n <span class=\"hljs-keyword\">import</span> os\n\n app = Flask(__name__)\n\n<span class=\"hljs-meta\"> @app.route('/')</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n <span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n     app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-running-the-app-locally\">Running the App Locally</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application locally:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see the \"Hello, World!\" message.</p>\n</li>\n</ol>\n<h2 id=\"heading-deploy-to-google-cloud-run\">Deploy to Google Cloud Run</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Generate the requirements.txt file</p>\n<pre><code class=\"lang-bash\"> pip list --format=freeze &gt; requirements.txt\n</code></pre>\n</li>\n<li><p>Deploy your application to Google Cloud Run:</p>\n<pre><code class=\"lang-bash\"> gcloud run deploy\n</code></pre>\n</li>\n<li><p>Wait for the deployment to complete. You will receive a URL where your application is live.</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple application on Google Cloud Run using Python and Flask!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with adding more routes and functionalities to your Flask application.</p>\n</li>\n<li><p>Learn more about managing and monitoring your applications on Google Cloud Run.</p>\n</li>\n<li><p>Explore other Google Cloud services that can enhance your application.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-19T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"}]}},{"node":{"id":"65ab370776b1ae2023868a88","slug":"gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","url":"https://xprilion.com/gemini-pro-vision-multimodal-python-flask-generative-ai-example-lab","title":"Python Flask app with Gemini Pro Vision Multimodal","subtitle":"A starter example of using Gemini AI Pro Vision Multimodal model via Google AI Studio (formerly MakerSuite).","brief":"Overview\nDuration: 1\nHey there!\nIn this codelab, you'll explore building a Python Flask application that leverages Gemini Pro Vision Multimodal's capabilities to perform tasks like image classification, object detection, and text understanding. By th...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>In this codelab, you'll explore building a Python Flask application that leverages Gemini Pro Vision Multimodal's capabilities to perform tasks like image classification, object detection, and text understanding. By the end, you'll have a practical understanding of integrating Gemini Pro Vision into your backend applications.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A development environment with Python 3.7 or above installed.</p>\n</li>\n<li><p>Access to terminal/shell for executing commands.</p>\n</li>\n<li><p>Basic understanding of Python and Flask</p>\n</li>\n<li><p>Familiarity with REST APIs is helpful but not mandatory</p>\n</li>\n<li><p>Access to a Gemini Pro Vision model</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-dev-environment\">Setting Up Your Dev Environment</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Log in to your <a target=\"_blank\" href=\"https://makersuite.google.com/\">Google AI Studio</a> account.</p>\n</li>\n<li><p>Create a new <code>API KEY</code>.</p>\n</li>\n<li><p>Note the API Key in a secure location.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-local-environment\">Setting Up Your Local Environment</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Install other required libraries:</p>\n<pre><code class=\"lang-bash\"> pip install marko google-generativeai\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-write-the-driving-code\">Write the driving code</h2>\n<p>Duration: 10</p>\n<ol>\n<li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, Response, g, render_template, jsonify\n<span class=\"hljs-keyword\">import</span> marko\n<span class=\"hljs-keyword\">import</span> google.generativeai <span class=\"hljs-keyword\">as</span> genai\n</code></pre>\n<ol>\n<li><strong>Initializing the App and Gemini API</strong>: We initialize our Flask app and load the Gemini API client.</li>\n</ol>\n<pre><code class=\"lang-python\">genai.configure(api_key=os.getenv(<span class=\"hljs-string\">\"API_KEY\"</span>))\n\napp = Flask(__name__)\napp.debug = <span class=\"hljs-literal\">True</span>\n\nconfig = {\n  <span class=\"hljs-string\">'temperature'</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">'top_k'</span>: <span class=\"hljs-number\">20</span>,\n  <span class=\"hljs-string\">'top_p'</span>: <span class=\"hljs-number\">0.9</span>,\n  <span class=\"hljs-string\">'max_output_tokens'</span>: <span class=\"hljs-number\">500</span>\n}\n</code></pre>\n<p>We also need to confiugre the security settings for the model output:</p>\n<pre><code class=\"lang-python\">safety_settings = [\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_HARASSMENT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_HATE_SPEECH\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  },\n  {\n    <span class=\"hljs-string\">\"category\"</span>: <span class=\"hljs-string\">\"HARM_CATEGORY_DANGEROUS_CONTENT\"</span>,\n    <span class=\"hljs-string\">\"threshold\"</span>: <span class=\"hljs-string\">\"BLOCK_MEDIUM_AND_ABOVE\"</span>\n  }\n]\n\nmodel = genai.GenerativeModel(model_name=<span class=\"hljs-string\">\"gemini-pro-vision\"</span>,\n                              generation_config=config,\n                              safety_settings=safety_settings)\n</code></pre>\n<ol>\n<li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-meta\">@app.route('/', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"chat.html\"</span>)\n\n<span class=\"hljs-meta\">@app.route('/chat', methods=['POST'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>():</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'user_image'</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> request.files:\n        <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"No file part\"</span>})\n\n    file = request.files[<span class=\"hljs-string\">'user_image'</span>]\n\n    <span class=\"hljs-keyword\">if</span> file.filename == <span class=\"hljs-string\">''</span>:\n        <span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-string\">\"No selected file\"</span>})\n\n    <span class=\"hljs-keyword\">if</span> file:\n        image_data = file.read()\n        image_parts = [\n            {\n                <span class=\"hljs-string\">\"mime_type\"</span>: file.content_type,\n                <span class=\"hljs-string\">\"data\"</span>: image_data\n            },\n        ]\n\n        prompt_parts = [\n            <span class=\"hljs-string\">\"You are Sheldon Cooper. User will upload an image. Based on the image, you have to come up with a Sheldon Cooper style fun fact. Also give a funny, sarcastic note about the image. \\n\\nUser's image:\\n\\n\"</span>,\n            image_parts[<span class=\"hljs-number\">0</span>],\n            <span class=\"hljs-string\">\"\\n\\nFun fact:\\n\"</span>,\n        ]    \n\n        response = model.generate_content(prompt_parts)\n\n        <span class=\"hljs-keyword\">return</span> jsonify({\n            <span class=\"hljs-string\">\"response\"</span>: marko.convert(response.text)\n        })\n</code></pre>\n<p>Finally, we'll add the entrypoint for the file which runs the Flask development server.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n<p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p>\n<h2 id=\"heading-ui-for-the-application\">UI for the application</h2>\n<p>Duration: 10</p>\n<p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-box\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-light p-3 mb-3 rounded\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border-left: 4px solid #43a047;\"</span>&gt;</span>Hi, I am Sheldon Cooper. Upload an image and I will tell you a fun fact.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-bar\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Updated form to include file upload --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-form\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group mb-3\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"image-input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"send-button\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Upload<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Then, let's add some JavaScript to the page for interactivity:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">appendImageToChat</span>(<span class=\"hljs-params\">file</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> reader = <span class=\"hljs-keyword\">new</span> FileReader();\n\n    reader.onloadend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> img = $(<span class=\"hljs-string\">'&lt;img&gt;'</span>).attr(<span class=\"hljs-string\">'src'</span>, reader.result).css({<span class=\"hljs-string\">'max-width'</span>: <span class=\"hljs-string\">'100%'</span>, <span class=\"hljs-string\">'height'</span>: <span class=\"hljs-string\">'auto'</span>});\n        $(<span class=\"hljs-string\">'#chat-box'</span>).append($(<span class=\"hljs-string\">'&lt;blockquote&gt;'</span>).css({<span class=\"hljs-string\">'border-left'</span>: <span class=\"hljs-string\">'4px solid dodgerblue'</span>}).append(img));\n    }\n\n    <span class=\"hljs-keyword\">if</span> (file) {\n        reader.readAsDataURL(file);\n    }\n}\n\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    $(<span class=\"hljs-string\">'#chat-form'</span>).submit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        e.preventDefault(); <span class=\"hljs-comment\">// Prevent the default form submission</span>\n\n        <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData(<span class=\"hljs-built_in\">this</span>);\n        <span class=\"hljs-keyword\">var</span> fileInput = $(<span class=\"hljs-string\">'#image-input'</span>)[<span class=\"hljs-number\">0</span>].files[<span class=\"hljs-number\">0</span>];\n\n        formData.append(<span class=\"hljs-string\">'user_image'</span>, fileInput);\n\n        <span class=\"hljs-keyword\">if</span> (fileInput) {\n            $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #1288ff;\"&gt;User: &lt;/blockquote&gt;'</span>);\n            appendImageToChat(fileInput);\n            $(<span class=\"hljs-string\">'#image-input'</span>).val(<span class=\"hljs-string\">''</span>);\n            $(<span class=\"hljs-string\">'#progress-bar'</span>).show();\n\n            <span class=\"hljs-comment\">// Use AJAX to send the formData to the server</span>\n            $.ajax({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/chat'</span>,\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'POST'</span>,\n                <span class=\"hljs-attr\">data</span>: formData,\n                <span class=\"hljs-attr\">processData</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Prevent jQuery from converting the data into a query string</span>\n                <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Set content type to false as jQuery will tell the server its a query string request</span>\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #43a047;\"&gt;Sheldon: '</span> + data.response + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                },\n                <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Sheldon: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                }\n            });\n        }\n    });\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"heading-running-the-app\">Running the App</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Set the <code>API_KEY</code> as environment variable in the terminal:</p>\n<pre><code class=\"lang-bash\"> <span class=\"hljs-built_in\">export</span> API_KEY=your_api_key\n</code></pre>\n</li>\n<li><p>Run your application:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</p>\n</li>\n</ol>\n<h2 id=\"heading-interacting-with-your-chatbot\">Interacting with Your Chatbot</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>The bot will greet you asking you to provide an image.</p>\n</li>\n<li><p>Upload a JPG/PNG below 1MB to the interface and click Upload.</p>\n</li>\n<li><p>The chatbot will respond with a fun fact about the image!</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a software powered by Google's Gemini AI! This bot acts like Sheldon Cooper and provides facts about user's uploaded images!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with different model parameters to see how they affect the output.</p>\n</li>\n<li><p>Try integrating this chatbot into a larger web application.</p>\n</li>\n<li><p>Explore other capabilities of Gemini AI.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-16T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"}]}},{"node":{"id":"65ab597a71622f998db313c4","slug":"vertexai-palm-api-introduction-python-lab","url":"https://xprilion.com/vertexai-palm-api-introduction-python-lab","title":"Introduction to Building Solutions with PaLM2 API via VertexAI on GCP","subtitle":"A starter guide to building innovative solutions with PaLM2 API via Vertex AI on GCP.","brief":"Overview\nDuration: 1\nHey there!\nIn this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is t...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>In this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is thinking and the bot will respond with hints about what it is thinking and how far away your guess is from the correct item.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account with active billing.</p>\n</li>\n<li><p>A development environment with Python 3.7 or above installed.</p>\n</li>\n<li><p>Access to terminal/shell for executing commands.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-environment\">Setting Up Your Google Cloud Environment</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Log in to your <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> account.</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n<li><p>Enable <a target=\"_blank\" href=\"https://cloud.google.com/billing/docs/how-to/modify-project\">billing for the project</a>.</p>\n</li>\n<li><p>Navigate to the <a target=\"_blank\" href=\"https://console.cloud.google.com/apis/dashboard\">APIs &amp; Services dashboard</a> and enable the Vertex AI API.</p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://cloud.google.com/iam/docs/keys-create-delete\">Create a service account and download the JSON key file</a> (<code>key.json</code>). Store this file safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-local-environment\">Setting Up Your Local Environment</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Install other required libraries:</p>\n<pre><code class=\"lang-bash\"> pip install marko google-cloud-aiplatform\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-write-the-driving-code\">Write the driving code</h2>\n<p>Duration: 10</p>\n<ol>\n<li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, Response, g, render_template, jsonify\n<span class=\"hljs-keyword\">import</span> marko\n<span class=\"hljs-keyword\">import</span> vertexai\n<span class=\"hljs-keyword\">from</span> vertexai.language_models <span class=\"hljs-keyword\">import</span> TextGenerationModel\n</code></pre>\n<ol>\n<li><strong>Initializing the App and Vertex AI</strong>: We initialize our Flask app and configure Vertex AI with our GCP project details.</li>\n</ol>\n<pre><code class=\"lang-python\">\napp = Flask(__name__)\napp.debug = <span class=\"hljs-literal\">True</span>\n\nvertexai.init(project=<span class=\"hljs-string\">\"project-x\"</span>, location=<span class=\"hljs-string\">\"us-central1\"</span>)\nparameters = {\n    <span class=\"hljs-string\">\"temperature\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">\"max_output_tokens\"</span>: <span class=\"hljs-number\">256</span>,\n    <span class=\"hljs-string\">\"top_p\"</span>: <span class=\"hljs-number\">0.8</span>,\n    <span class=\"hljs-string\">\"top_k\"</span>: <span class=\"hljs-number\">40</span>\n}\n\nmodel = TextGenerationModel.from_pretrained(<span class=\"hljs-string\">\"text-bison@001\"</span>)\n</code></pre>\n<ol>\n<li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-meta\">@app.route('/', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"chat.html\"</span>)\n\n<span class=\"hljs-meta\">@app.route('/chat/&lt;guess&gt;/&lt;actual&gt;', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>(<span class=\"hljs-params\">guess, actual</span>):</span>\n    response = model.predict(\n        <span class=\"hljs-string\">\"You are the bot in a guessing game where the player tries to guess a secret item you are thinking about. \"</span> +\n        <span class=\"hljs-string\">\"The rules of the game are: 1. the player will make a guess. 2. if the guess is correct or very close to the correct answer, you will say, 'Congratulations, you've got it right!' \"</span> +\n         <span class=\"hljs-string\">\"3. If they are not very close to the actual item, respond with a humorous remark about their guess. Then without mentioning the actual item, \"</span> + actual + <span class=\"hljs-string\">\", provide a subtle hint to guide the player closer to the secret item.\"</span> +\n        <span class=\"hljs-string\">\"The player has just guessed \"</span> + guess + <span class=\"hljs-string\">\".\"</span>,\n        **parameters\n    )\n\n    <span class=\"hljs-keyword\">return</span> jsonify({\n        <span class=\"hljs-string\">\"response\"</span>: marko.convert(response.text)\n    })\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n<p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p>\n<h2 id=\"heading-ui-for-the-application\">UI for the application</h2>\n<p>Duration: 10</p>\n<p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-box\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-light p-3 mb-3 rounded\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border-left: 4px solid #43a047;\"</span>&gt;</span>Bot: Can you guess what am I thinking?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-bar\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Type your message...\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group-append\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"send-button\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Guess<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"quit-button\"</span>&gt;</span>Give Up<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> items = [\n    <span class=\"hljs-string\">\"Eiffel Tower\"</span>,\n    <span class=\"hljs-string\">\"Pineapple\"</span>,\n    <span class=\"hljs-comment\">// ... many more!</span>\n    <span class=\"hljs-string\">\"Rubik's Cube\"</span>,\n    <span class=\"hljs-string\">\"Bamboo\"</span>\n];\n\n    <span class=\"hljs-keyword\">var</span> actual_item = items[<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*items.length)];\n\n    $(<span class=\"hljs-string\">'#chat-input'</span>).keypress(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">if</span>(e.which == <span class=\"hljs-number\">13</span>) { <span class=\"hljs-comment\">// 13 is the Enter key</span>\n            $(<span class=\"hljs-string\">'#send-button'</span>).click();\n        }\n    });\n\n    $(<span class=\"hljs-string\">'#quit-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: The answer was '</span> + actual_item + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#send-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#quit-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n    });\n\n    $(<span class=\"hljs-string\">'#send-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-string\">'#chat-input'</span>).val().trim();\n        <span class=\"hljs-keyword\">if</span> (input !== <span class=\"hljs-string\">''</span>) {\n            $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid dodgerblue;\"&gt;User: '</span> + input + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n            $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n            $(<span class=\"hljs-string\">'#progress-bar'</span>).show();\n            <span class=\"hljs-comment\">// Use AJAX to send the input to the server and get a response</span>\n            $.ajax({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/chat/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(input) + <span class=\"hljs-string\">'/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(actual_item),\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'GET'</span>,\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #43a047;\"&gt;Bot: '</span> + data.response + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                },\n                <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                }\n            });\n        }\n    });\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"heading-running-the-app\">Running the App</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</p>\n</li>\n</ol>\n<h2 id=\"heading-interacting-with-your-chatbot\">Interacting with Your Chatbot</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>The bot will greet you asking you to guess what the bot is thinking about.</p>\n</li>\n<li><p>Enter a guess in the chat interface.</p>\n</li>\n<li><p>The chatbot will respond with if your guess was close to what the actual secret item it was thinking about!</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple chatbot using Flask and Google Cloud's Vertex AI. This bot plays a guessing game with the users!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with different model parameters to see how they affect the output.</p>\n</li>\n<li><p>Try integrating this chatbot into a larger web application.</p>\n</li>\n<li><p>Explore other capabilities of Vertex AI.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-08T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"},{"slug":"gcp"}]}}]}},"staticQueryHashes":[],"slicesMap":{}}