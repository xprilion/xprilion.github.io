{"componentChunkName":"component---src-templates-codelabs-codelab-tsx","path":"/codelabs/vertexai-palm-api-introduction-python-lab/","result":{"pageContext":{"node":{"id":"65ab597a71622f998db313c4","slug":"vertexai-palm-api-introduction-python-lab","url":"https://xprilion.com/vertexai-palm-api-introduction-python-lab","title":"Introduction to Building Solutions with PaLM2 API via VertexAI on GCP","subtitle":"A starter guide to building innovative solutions with PaLM2 API via Vertex AI on GCP.","brief":"Overview\nDuration: 1\nHey there!\nIn this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is t...","coverImage":null,"content":{"html":"<h2 id=\"heading-overview\">Overview</h2>\n<p>Duration: 1</p>\n<p>Hey there!</p>\n<p>In this Codelab, we'll walk through creating a simple chatbot based game using Google Cloud's Vertex AI and Flask, a popular web framework in Python. Our application will ask you to make a guess about what the bot is thinking and the bot will respond with hints about what it is thinking and how far away your guess is from the correct item.</p>\n<h2 id=\"heading-requirements\">Requirements</h2>\n<p>Duration: 2</p>\n<p>In order to follow this codelab, you'll need the following:</p>\n<ol>\n<li><p>A Google Cloud Platform account with active billing.</p>\n</li>\n<li><p>A development environment with Python 3.7 or above installed.</p>\n</li>\n<li><p>Access to terminal/shell for executing commands.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-google-cloud-environment\">Setting Up Your Google Cloud Environment</h2>\n<p>Duration: 10</p>\n<ol>\n<li><p>Log in to your <a target=\"_blank\" href=\"https://console.cloud.google.com/\">Google Cloud Platform</a> account.</p>\n</li>\n<li><p>Create a new project, let's name it <code>project-x</code>.</p>\n</li>\n<li><p>Enable <a target=\"_blank\" href=\"https://cloud.google.com/billing/docs/how-to/modify-project\">billing for the project</a>.</p>\n</li>\n<li><p>Navigate to the <a target=\"_blank\" href=\"https://console.cloud.google.com/apis/dashboard\">APIs &amp; Services dashboard</a> and enable the Vertex AI API.</p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://cloud.google.com/iam/docs/keys-create-delete\">Create a service account and download the JSON key file</a> (<code>key.json</code>). Store this file safely.</p>\n</li>\n</ol>\n<h2 id=\"heading-setting-up-your-local-environment\">Setting Up Your Local Environment</h2>\n<p>Duration: 5</p>\n<ol>\n<li><p>Install Flask:</p>\n<pre><code class=\"lang-bash\"> pip install Flask\n</code></pre>\n</li>\n<li><p>Install other required libraries:</p>\n<pre><code class=\"lang-bash\"> pip install marko google-cloud-aiplatform\n</code></pre>\n</li>\n</ol>\n<h2 id=\"heading-write-the-driving-code\">Write the driving code</h2>\n<p>Duration: 10</p>\n<ol>\n<li><strong>Importing Libraries</strong>: We start by importing necessary Python libraries. Flask for our web framework, Vertex AI for AI model interaction, and others for various functionalities.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, Response, g, render_template, jsonify\n<span class=\"hljs-keyword\">import</span> marko\n<span class=\"hljs-keyword\">import</span> vertexai\n<span class=\"hljs-keyword\">from</span> vertexai.language_models <span class=\"hljs-keyword\">import</span> TextGenerationModel\n</code></pre>\n<ol>\n<li><strong>Initializing the App and Vertex AI</strong>: We initialize our Flask app and configure Vertex AI with our GCP project details.</li>\n</ol>\n<pre><code class=\"lang-python\">\napp = Flask(__name__)\napp.debug = <span class=\"hljs-literal\">True</span>\n\nvertexai.init(project=<span class=\"hljs-string\">\"project-x\"</span>, location=<span class=\"hljs-string\">\"us-central1\"</span>)\nparameters = {\n    <span class=\"hljs-string\">\"temperature\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">\"max_output_tokens\"</span>: <span class=\"hljs-number\">256</span>,\n    <span class=\"hljs-string\">\"top_p\"</span>: <span class=\"hljs-number\">0.8</span>,\n    <span class=\"hljs-string\">\"top_k\"</span>: <span class=\"hljs-number\">40</span>\n}\n\nmodel = TextGenerationModel.from_pretrained(<span class=\"hljs-string\">\"text-bison@001\"</span>)\n</code></pre>\n<ol>\n<li><strong>Defining Routes</strong>: We define two routes - one for the home page and another for handling chat messages.</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-meta\">@app.route('/', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"chat.html\"</span>)\n\n<span class=\"hljs-meta\">@app.route('/chat/&lt;guess&gt;/&lt;actual&gt;', methods=['GET'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>(<span class=\"hljs-params\">guess, actual</span>):</span>\n    response = model.predict(\n        <span class=\"hljs-string\">\"You are the bot in a guessing game where the player tries to guess a secret item you are thinking about. \"</span> +\n        <span class=\"hljs-string\">\"The rules of the game are: 1. the player will make a guess. 2. if the guess is correct or very close to the correct answer, you will say, 'Congratulations, you've got it right!' \"</span> +\n         <span class=\"hljs-string\">\"3. If they are not very close to the actual item, respond with a humorous remark about their guess. Then without mentioning the actual item, \"</span> + actual + <span class=\"hljs-string\">\", provide a subtle hint to guide the player closer to the secret item.\"</span> +\n        <span class=\"hljs-string\">\"The player has just guessed \"</span> + guess + <span class=\"hljs-string\">\".\"</span>,\n        **parameters\n    )\n\n    <span class=\"hljs-keyword\">return</span> jsonify({\n        <span class=\"hljs-string\">\"response\"</span>: marko.convert(response.text)\n    })\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>, host=<span class=\"hljs-string\">\"0.0.0.0\"</span>, port=int(os.environ.get(<span class=\"hljs-string\">\"PORT\"</span>, <span class=\"hljs-number\">8080</span>)))\n</code></pre>\n<p>With the backend done, we're free to implement the UI for the API in any manner we want to.</p>\n<h2 id=\"heading-ui-for-the-application\">UI for the application</h2>\n<p>Duration: 10</p>\n<p>Now, we can develop a quick UI to work with the API of the chatbot. Here's some sample HTML/JS to create one such UI.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-box\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-light p-3 mb-3 rounded\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border-left: 4px solid #43a047;\"</span>&gt;</span>Bot: Can you guess what am I thinking?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">progress</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-bar\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">progress</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chat-input\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Type your message...\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-group-append\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"send-button\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Guess<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"quit-button\"</span>&gt;</span>Give Up<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> items = [\n    <span class=\"hljs-string\">\"Eiffel Tower\"</span>,\n    <span class=\"hljs-string\">\"Pineapple\"</span>,\n    <span class=\"hljs-comment\">// ... many more!</span>\n    <span class=\"hljs-string\">\"Rubik's Cube\"</span>,\n    <span class=\"hljs-string\">\"Bamboo\"</span>\n];\n\n    <span class=\"hljs-keyword\">var</span> actual_item = items[<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*items.length)];\n\n    $(<span class=\"hljs-string\">'#chat-input'</span>).keypress(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">if</span>(e.which == <span class=\"hljs-number\">13</span>) { <span class=\"hljs-comment\">// 13 is the Enter key</span>\n            $(<span class=\"hljs-string\">'#send-button'</span>).click();\n        }\n    });\n\n    $(<span class=\"hljs-string\">'#quit-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: The answer was '</span> + actual_item + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n        $(<span class=\"hljs-string\">'#chat-input'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#send-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n        $(<span class=\"hljs-string\">'#quit-button'</span>).prop(<span class=\"hljs-string\">'disabled'</span>, <span class=\"hljs-literal\">true</span>);\n    });\n\n    $(<span class=\"hljs-string\">'#send-button'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-string\">'#chat-input'</span>).val().trim();\n        <span class=\"hljs-keyword\">if</span> (input !== <span class=\"hljs-string\">''</span>) {\n            $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid dodgerblue;\"&gt;User: '</span> + input + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n            $(<span class=\"hljs-string\">'#chat-input'</span>).val(<span class=\"hljs-string\">''</span>);\n            $(<span class=\"hljs-string\">'#progress-bar'</span>).show();\n            <span class=\"hljs-comment\">// Use AJAX to send the input to the server and get a response</span>\n            $.ajax({\n                <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/chat/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(input) + <span class=\"hljs-string\">'/'</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(actual_item),\n                <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'GET'</span>,\n                <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid #43a047;\"&gt;Bot: '</span> + data.response + <span class=\"hljs-string\">'&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                },\n                <span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                    $(<span class=\"hljs-string\">'#chat-box'</span>).append(<span class=\"hljs-string\">'&lt;blockquote style=\"border-left: 4px solid red;\"&gt;Bot: Sorry, I am not able to respond at the moment.&lt;/blockquote&gt;'</span>);\n                    $(<span class=\"hljs-string\">'#progress-bar'</span>).hide();\n                }\n            });\n        }\n    });\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"heading-running-the-app\">Running the App</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>Run your application:</p>\n<pre><code class=\"lang-bash\"> python main.py\n</code></pre>\n</li>\n<li><p>Open your web browser and go to <a target=\"_blank\" href=\"http://localhost:8080\"><code>http://localhost:8080</code></a>. You should see your chatbot interface.</p>\n</li>\n</ol>\n<h2 id=\"heading-interacting-with-your-chatbot\">Interacting with Your Chatbot</h2>\n<p>Duration: 2</p>\n<ol>\n<li><p>The bot will greet you asking you to guess what the bot is thinking about.</p>\n</li>\n<li><p>Enter a guess in the chat interface.</p>\n</li>\n<li><p>The chatbot will respond with if your guess was close to what the actual secret item it was thinking about!</p>\n</li>\n</ol>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Duration: 1</p>\n<p>Congratulations! You've just built and deployed a simple chatbot using Flask and Google Cloud's Vertex AI. This bot plays a guessing game with the users!</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Duration: 1</p>\n<ul>\n<li><p>Experiment with different model parameters to see how they affect the output.</p>\n</li>\n<li><p>Try integrating this chatbot into a larger web application.</p>\n</li>\n<li><p>Explore other capabilities of Vertex AI.</p>\n</li>\n</ul>\n"},"publishedAt":"2023-12-08T18:30:00.000Z","seo":{"title":null,"description":null},"tags":[{"slug":"codelab"},{"slug":"python"},{"slug":"gcp"}]}}},"staticQueryHashes":[],"slicesMap":{}}