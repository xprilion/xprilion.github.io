1:"$Sreact.fragment"
2:I[6575,["177","static/chunks/app/layout-03b28790fff4d2e4.js"],"ThemeProvider"]
3:I[4922,[],""]
4:I[3720,[],""]
5:I[3369,["177","static/chunks/app/layout-03b28790fff4d2e4.js"],"GoogleAnalytics"]
7:I[2466,[],"MetadataBoundary"]
9:I[2466,[],"OutletBoundary"]
c:I[6114,[],"AsyncMetadataOutlet"]
e:I[2466,[],"ViewportBoundary"]
10:I[4797,[],""]
:HL["/_next/static/media/22966f4f11fece13-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/3df4cf0b22f61940-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/a481f011d1f4a14b-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/feff4f1fc62fae3c-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/5d465971106e06ba.css","style"]
:HL["/_next/static/css/2dba37557e579c7e.css","style"]
:HL["/_next/static/css/f3b8208e8dab82f4.css","style"]
0:{"P":null,"b":"WCf7w6XHJCG1CGc50gW8b","p":"","c":["","python-websockets-ssl-with-lets-encrypt"],"i":false,"f":[[["",{"children":["(blog)",{"children":[["slug","python-websockets-ssl-with-lets-encrypt","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5d465971106e06ba.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/2dba37557e579c7e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_6ab973","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"/apple-icon.png","sizes":"96x96"}],["$","link",null,{"rel":"icon","type":"image/svg+xml","href":"/icon0.svg"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"xprilion's blog"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","meta",null,{"name":"theme-color","content":"#7b46f6"}],["$","meta",null,{"charSet":"utf-8"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta",null,{"itemProp":"name","content":"xprilion's blog"}],["$","meta",null,{"itemProp":"description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"itemProp":"image","content":"/favicon.png"}],["$","meta",null,{"property":"og:title","content":"xprilion's blog"}],["$","meta",null,{"property":"og:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"property":"og:image","content":"/favicon.png"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:site","content":"@xprilion"}],["$","meta",null,{"name":"twitter:creator","content":"@xprilion"}],["$","meta",null,{"name":"twitter:title","content":"xprilion's blog"}],["$","meta",null,{"name":"twitter:description","content":"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes."}],["$","meta",null,{"name":"twitter:image","content":"/favicon.png"}]]}],["$","body",null,{"className":"antialiased","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}],["$","$L5",null,{"gaId":"G-NKJL65V2YL"}]]}]]}],{"children":["(blog)",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:style","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:1:props:style","children":404}],["$","div",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:2:props:style","children":["$","h2",null,{"style":"$0:f:0:1:1:props:children:1:props:children:1:props:children:props:children:props:notFound:0:1:props:children:props:children:2:props:children:props:style","children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","python-websockets-ssl-with-lets-encrypt","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",["$","$L7",null,{"children":"$L8"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f3b8208e8dab82f4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L9",null,{"children":["$La","$Lb",["$","$Lc",null,{"promise":"$@d"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","y5FmqUv3adQkiDLwjkMcE",{"children":[["$","$Le",null,{"children":"$Lf"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[6114,[],"AsyncMetadata"]
8:["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]
b:null
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
14:I[1701,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f945c0378016101e.js"],"default"]
15:I[1999,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f945c0378016101e.js"],""]
16:I[1106,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f945c0378016101e.js"],"default"]
18:I[4046,["943","static/chunks/943-eb5c9570e2ea5452.js","981","static/chunks/981-982ff48b33ef9837.js","224","static/chunks/224-ed8f8dcad199b1cb.js","356","static/chunks/app/(blog)/%5Bslug%5D/page-f945c0378016101e.js"],""]
17:T1c30,<p>This tutorial is an explanation of my gist <a href="https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6">Python Websockets SSL with Let's Encrypt</a> .</p><p>With the launch of HTML5 in 2008, a technology that immediately took off in popularity was WebSockets. According to W3C, the basic definition of a Websocket is - an interface that enables web applications to maintain bidirectional communications with server-side processes.</p><p>In this short tutorial, I'll be showing you how you can host a WebSocket server with SSL enabled on it. This allows your socket server to run on an HTTPS address.</p><h2 id="setup">Setup</h2><p>We'll be working with <code>asyncio</code> library and for WebSocket server implementation will be using the <code>websockets</code> library.</p><p>The <code>asyncio</code> library comes pre-packaged with Python distributions since Python 3.4. To install <code>websockets</code> library, you can use the following command:</p><pre><code class="language-bash">pip install websockets
</code></pre><p>Next, we'll be looking to how to generate the SSL certificate files.</p><h2 id="generate-certificate-and-keyfile-using-lets-encrypt">Generate certificate and keyfile using Let's Encrypt</h2><p>Before you can enable SSL on your WebSocket being run by a Python script, you'll have to generate certificate files for your domain.</p><p>The basic gist of this step is to fetch Let's Encrypt signed certficiates for your domain and store them on your server where the Python WebSocket script is running.</p><p>Here's a great quick tutorial on <a href="https://www.digitalocean.com/community/tutorials/how-to-use-certbot-standalone-mode-to-retrieve-let-s-encrypt-ssl-certificates-on-ubuntu-20-04">How To Use Certbot Standalone Mode to Retrieve Let's Encrypt SSL Certificates on Ubuntu 20.04</a>.</p><h2 id="make-certificate-files-accessible">Make certificate files accessible</h2><p>After generating the files correctly, you need to make them accessible to the current user who runs the Python WebSocket script.</p><p>In the previous step, if <code>certbot</code> stored your certificate files at <code>/etc/letsencrypt/live/your_domain</code> location, you should be able to see 4 files when you perform an <code>ls</code> on the folder -</p><pre><code class="language-bash">~$ ls /etc/letsencrypt/live/your_domain
cert.pem  chain.pem  fullchain.pem  privkey.pem  README
</code></pre><p>To change the owner of the certificate files, use the following command:</p><pre><code class="language-bash">~$ sudo chown -R $(id -u):$(id -g) /etc/letsencrypt/live/your_domain
</code></pre><p>Next, ensure that the right permissions are applied to the folder:</p><pre><code class="language-bash">~$ sudo chmod -R 400 /etc/letsencrypt/live/your_domain
</code></pre><p>We're now good to read these files from the Python WebSocket script.</p><h2 id="create-server-script">Create server script</h2><p>While your WebSocket server script will differ from the most barebones implementation, here's one for you -</p><p>Create a file named <code>socket_</code><a href="http://server.py"><code>server.py</code></a>. Then, make all the necessary imports.</p><pre><code class="language-python">#!/usr/bin/env python

# WS server example that synchronizes state across clients

import asyncio
import json
import logging
import websockets
import ssl

logging.basicConfig()
</code></pre><p>Next, let us configure the SSL for this script, as shown below -</p><pre><code class="language-python">ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)

# Generate with Lets Encrypt, chown to current user and 400 permissions
ssl_cert = "/etc/letsencrypt/live/your_domain/fullchain.pem"
ssl_key = "/etc/letsencrypt/live/your_domain/privkey.pem"

ssl_context.load_cert_chain(ssl_cert, keyfile=ssl_key)
</code></pre><p>The above code configures the script to run a TLS server with the certificates available in the folder generated by <code>certbot</code>.</p><p>Next, we define the functions that shall be used to notify clients of the socket server and to get information from them.</p><pre><code class="language-python">STATE = {"value": 0}

USERS = set()


def state_event():
    return json.dumps({"type": "state", **STATE})


def users_event():
    return json.dumps({"type": "users", "count": len(USERS)})


async def notify_state():
    if USERS:  # asyncio.wait doesn't accept an empty list
        message = state_event()
        await asyncio.wait([user.send(message) for user in USERS])


async def notify_users():
    if USERS:  # asyncio.wait doesn't accept an empty list
        message = users_event()
        await asyncio.wait([user.send(message) for user in USERS])
</code></pre><p>After that, we need to add functions that register and unregister clients from the WebSocket.</p><pre><code class="language-python">async def register(websocket):
    USERS.add(websocket)
    await notify_users()


async def unregister(websocket):
    USERS.remove(websocket)
    await notify_users()
</code></pre><p>This done, let us implement a function that gets state update requests from clients and performs it.</p><pre><code class="language-python">async def counter(websocket, path):
    # register(websocket) sends user_event() to websocket
    await register(websocket)
    try:
        await websocket.send(state_event())
        async for message in websocket:
            data = json.loads(message)
            if data["action"] == "minus":
                STATE["value"] -= 1
                await notify_state()
            elif data["action"] == "plus":
                STATE["value"] += 1
                await notify_state()
            else:
                logging.error("unsupported event: {}", data)
    finally:
        await unregister(websocket)
</code></pre><p>Finally, we run the server.</p><pre><code class="language-python">start_server = websockets.serve(counter, "0.0.0.0", 6789, ssl=ssl_context)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
</code></pre><p>How you expose the server to the internet, I shall leave that on your use case. However, you can explore this tutorial on <a href="https://websockets.readthedocs.io/en/stable/howto/nginx.html">Websockets - Deploy behind nginx</a>.</p><h2 id="implement-a-client-page">Implement a client page</h2><p>To test the above WebSocket script, you can spin up your own client script or feel free to use the <a href="https://gist.github.com/xprilion/ceab48ec77a70be1d403e396170991e6#file-socket_client-html">socket_client.html</a> file I've provided.</p><p>Make sure to update the following line in the client file to point to your live server -</p><pre><code class="language-javascript">websocket = new WebSocket("wss://localhost:6789/");
</code></pre><p>Note that we're using the <code>wss://</code> protocol here instead of <code>ws://</code> protocol which is popularly found on other tutorials on the internet.</p><h2 id="conclusion">Conclusion</h2><p>This was my attempt at explaining the gist I put out more than an year back. Hope it helps you go through the process easier than how I had first written it.</p><p>Make sure to leave me feedback on how this blog went!</p>6:["$","$L14",null,{"children":[["$","div",null,{"className":"mb-6","children":[["$","$L15",null,{"href":"/posts","className":"text-blue-600 hover:underline mb-4 block","children":"← Back to all posts"}],["$","h1",null,{"className":"text-2xl md:text-3xl font-bold mb-2","children":"Python Websockets SSL with Let's Encrypt"}],["$","p",null,{"className":"text-gray-600 dark:text-gray-200 text-sm ","children":"20 November, 2022"}]]}],null,["$","$L16",null,{"html":"$17","slug":"python-websockets-ssl-with-lets-encrypt","title":"Python Websockets SSL with Let's Encrypt"}],["$","$L18",null,{"id":"MathJax-script","src":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.js","async":true,"strategy":"afterInteractive"}],["$","$L18",null,{"id":"MathJax-config","strategy":"beforeInteractive","dangerouslySetInnerHTML":{"__html":"\n          MathJax = {\n            tex: {\n              inlineMath: [['((', '))']],\n              displayMath: [['[[', ']]']],\n            },\n            svg: {\n              fontCache: 'global'\n            }\n          };\n        "}}]]}]
13:{"metadata":[["$","title","0",{"children":"Python Websockets SSL with Let's Encrypt"}],["$","meta","1",{"name":"description","content":"This tutorial is an explanation of my gist Python Websockets SSL with Let's Encrypt .\n\nWith the launch of HTML5 in 2008, a technology that immediately took off in popularity was WebSockets. According to W3C, the basic definition of a Websocket is - an interface that enables web applications to maintain bidirectional communications with server-side processes.\n\nIn this short tutorial, I'll be showing you how you can host a WebSocket server with SSL enabled on it. This allows your socket server to "}],["$","link","2",{"rel":"icon","href":"/logo.jpg"}]],"error":null,"digest":"$undefined"}
d:{"metadata":"$13:metadata","error":null,"digest":"$undefined"}
