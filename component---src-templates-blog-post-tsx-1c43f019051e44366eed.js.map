{"version":3,"file":"component---src-templates-blog-post-tsx-1c43f019051e44366eed.js","mappings":"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","sources":["webpack://gatsbyblog/./src/components/layout.tsx","webpack://gatsbyblog/./src/templates/blog/post.tsx","webpack://gatsbyblog/./src/utils/date.ts","webpack://gatsbyblog/./node_modules/react-cusdis/dist/ReactCusdis.js","webpack://gatsbyblog/./node_modules/react-cusdis/dist/useScript.js"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport \"../styles/global.css\";\nimport Header from \"./header\";\nimport Footer from \"./footer\";\n\ntype LayoutProps = {\n    children: ReactNode;\n};\n\nexport const Head = () => (\n    <>\n        <html lang=\"en\" />\n        <title>\n            Anubhav Singh | xprilion&apos;s blog\n        </title>\n        <link rel=\"icon\" href={\"/favicon.ico\"} />\n        <link rel=\"shortcut icon\" type=\"image/x-icon\" href={\"/favicon.ico\"} />\n        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={\"/favicon.png\"} />\n        <meta name=\"theme-color\" content=\"#7b46f6\" />\n\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n        <meta itemProp=\"name\" content=\"xprilion's blog\" />\n        <meta itemProp=\"description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta itemProp=\"image\" content={\"/favicon.png\"} />\n        <meta name=\"description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta property=\"og:title\" content={\"xprilion's blog\"} />\n        <meta property=\"og:description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta property=\"og:image\" content={\"/favicon.png\"}/>\n        <meta property=\"og:type\" content=\"website\" />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"@xprilion\" />\n        <meta name=\"twitter:creator\" content=\"@xprilion\" />\n        <meta name=\"twitter:title\" content={\"xprilion's blog\"} />\n        <meta name=\"twitter:description\" content={\"Hey, I'm Anubhav Singh. I love building software, mixing stacks and making memes.\"} />\n        <meta name=\"twitter:image\" content={\"/favicon.png\"} />\n    </>\n)\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n    return (\n        <div className=\"flex flex-col h-screen mx-auto p-4 lg:p-8 mx-w-full max-w-screen-xl\" >\n            <Header />\n            <hr className={\"hr-full\"} />\n            <main className={\"max-w-[stretch] lg:max-w-[800px] mx-auto\"}>\n                {children}\n            </main>\n            <br />\n            <hr className={\"hr-full\"} />\n            <Footer />\n        </div>\n    );\n};\n\nexport default Layout;\n","import React, {useEffect} from \"react\";\nimport { Helmet } from \"react-helmet\"\nimport Layout from \"../../components/layout\";\nimport Prism from 'prismjs';\nimport {formatDate} from \"../../utils/date\";\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-bash.min.js';\nimport 'prismjs/components/prism-typescript.min.js';\nimport 'prismjs/components/prism-javascript.min.js';\nimport 'prismjs/components/prism-json.min.js';\nimport 'prismjs/components/prism-python.min.js';\nimport {ReactCusdis} from \"react-cusdis\";\nimport {SignupForm} from \"../../components/signup-form\";\n\n\n\nconst Post = ({pageContext}: PostProps) => {\n    const {id, title, brief, url, publishedAt, coverImage, content, seo} = pageContext.node\n\n    useEffect(() => {\n        Prism.highlightAll();\n    }, [content]);\n\n    return (\n        <Layout>\n            <Helmet>\n                <title>{`${title} | xprilion's blog`}</title>\n                <meta itemProp=\"name\" content={`${title} | xprilion's blog`}/>\n\n                <meta name=\"description\" content={brief}/>\n                <meta property=\"og:description\" content={brief}/>\n\n                <meta name=\"twitter:title\" content={`${title} | xprilion's blog`}/>\n                <meta name=\"twitter:description\" content={brief}/>\n\n                {coverImage && <meta property=\"image\" content={coverImage.url}/>}\n                {coverImage && <meta property=\"og:image\" content={coverImage.url}/>}\n                {coverImage && <meta property=\"twitter:image\" content={coverImage.url}/>}\n            </Helmet>\n            <h1>{title}</h1>\n            <p style={{marginTop: \"-1rem\"}}><small>{formatDate(publishedAt)}</small></p>\n            {coverImage && <img src={coverImage.url} alt={title}/>}\n            <br/>\n            <div dangerouslySetInnerHTML={{__html: content.html}}/>\n            <br />\n            <SignupForm />\n            <br />\n            {\n                (seo?.title || id) && <ReactCusdis\n                    attrs={{\n                        host: 'https://cusdis.com',\n                        appId: 'e9bc0bcb-d463-4f63-8604-34e78a1ec232',\n                        pageId: seo?.title ? seo.title : id,\n                        pageTitle: title,\n                        pageUrl: url\n                    }}\n                />\n            }\n        </Layout>\n    );\n};\n\nexport default Post;\n","export const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n\n    const day = date.getDate();\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const month = monthNames[date.getMonth()];\n    const year = date.getFullYear();\n\n    return `${day} ${month}, ${year}`;\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactCusdis = void 0;\nconst React = require(\"react\");\nconst useScript_1 = require(\"./useScript\");\nfunction ReactCusdis(props) {\n    const divRef = React.useRef(null);\n    const host = props.attrs.host || 'https://cusdis.com';\n    useScript_1.useScript(`${host}/js/cusdis.es.js`);\n    useScript_1.useScript(props.lang ? `${host}/js/widget/lang/${props.lang}.js` : '');\n    React.useLayoutEffect(() => {\n        // @ts-expect-error\n        const render = window.renderCusdis;\n        if (render) {\n            render(divRef.current);\n        }\n    }, [\n        props.attrs.appId,\n        props.attrs.host,\n        props.attrs.pageId,\n        props.attrs.pageTitle,\n        props.attrs.pageUrl,\n        props.lang\n    ]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { id: \"cusdis_thread\", \"data-host\": host, \"data-page-id\": props.attrs.pageId, \"data-app-id\": props.attrs.appId, \"data-page-title\": props.attrs.pageTitle, \"data-page-url\": props.attrs.pageUrl, \"data-theme\": props.attrs.theme, style: props.style, ref: divRef })));\n}\nexports.ReactCusdis = ReactCusdis;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useScript = void 0;\nconst React = require(\"react\");\nfunction useScript(src) {\n    // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n    const [status, setStatus] = React.useState(src ? \"loading\" : \"idle\");\n    React.useEffect(() => {\n        // Allow falsy src value if waiting on other data needed for\n        // constructing the script URL passed to this hook.\n        if (!src) {\n            setStatus(\"idle\");\n            return;\n        }\n        // Fetch existing script element by src\n        // It may have been added by another intance of this hook\n        let script = document.querySelector(`script[src=\"${src}\"]`);\n        if (!script) {\n            // Create script\n            script = document.createElement(\"script\");\n            script.src = src;\n            script.async = true;\n            script.setAttribute(\"data-status\", \"loading\");\n            // Add script to document body\n            document.body.appendChild(script);\n            // Store status in attribute on script\n            // This can be read by other instances of this hook\n            const setAttributeFromEvent = (event) => {\n                script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n            };\n            script.addEventListener(\"load\", setAttributeFromEvent);\n            script.addEventListener(\"error\", setAttributeFromEvent);\n        }\n        else {\n            // Grab existing script status from attribute and set to state.\n            // @ts-expect-error\n            setStatus(script.getAttribute(\"data-status\"));\n        }\n        // Script event handler to update status in state\n        // Note: Even if the script already exists we still need to add\n        // event handlers to update the state for *this* hook instance.\n        const setStateFromEvent = (event) => {\n            setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n        };\n        // Add event listeners\n        script.addEventListener(\"load\", setStateFromEvent);\n        script.addEventListener(\"error\", setStateFromEvent);\n        // Remove event listeners on cleanup\n        return () => {\n            if (script) {\n                script.removeEventListener(\"load\", setStateFromEvent);\n                script.removeEventListener(\"error\", setStateFromEvent);\n            }\n        };\n    }, [src] // Only re-run effect if script src changes\n    );\n    return status;\n}\nexports.useScript = useScript;\n"],"names":["_ref","children","React","className","Header","Footer","pageContext","id","title","brief","url","publishedAt","coverImage","content","seo","node","useEffect","Prism","Layout","Helmet","itemProp","name","property","style","marginTop","formatDate","src","alt","dangerouslySetInnerHTML","__html","html","SignupForm","ReactCusdis","attrs","host","appId","pageId","pageTitle","pageUrl","dateStr","date","Date","getDate","getMonth","getFullYear","exports","useScript_1","props","divRef","useRef","useScript","lang","useLayoutEffect","render","window","renderCusdis","current","createElement","Fragment","theme","ref","Object","defineProperty","value","status","setStatus","useState","script","document","querySelector","getAttribute","async","setAttribute","body","appendChild","setAttributeFromEvent","event","type","addEventListener","setStateFromEvent","removeEventListener"],"sourceRoot":""}