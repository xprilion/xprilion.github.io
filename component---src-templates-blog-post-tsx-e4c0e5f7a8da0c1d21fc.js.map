{"version":3,"file":"component---src-templates-blog-post-tsx-e4c0e5f7a8da0c1d21fc.js","mappings":"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","sources":["webpack://gatsbyblog/./src/templates/blog-post.tsx","webpack://gatsbyblog/./src/utils/date.ts","webpack://gatsbyblog/./node_modules/react-cusdis/dist/ReactCusdis.js","webpack://gatsbyblog/./node_modules/react-cusdis/dist/useScript.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport Prism from 'prismjs';\nimport {formatDate} from \"../utils/date\";\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-bash.min.js';\nimport 'prismjs/components/prism-typescript.min.js';\nimport 'prismjs/components/prism-javascript.min.js';\nimport 'prismjs/components/prism-json.min.js';\nimport 'prismjs/components/prism-python.min.js';\nimport {ReactCusdis} from \"react-cusdis\";\nimport {SignupForm} from \"../components/signup-form\";\n\n\ninterface BlogPostProps {\n    data: {\n        hashnode: {\n            publication: {\n                post: {\n                    title: string;\n                    url: string;\n                    publishedAt: string;\n                    coverImage: {\n                        url: string;\n                    };\n                    content: {\n                        html: string;\n                    },\n                    seo: {\n                        title: string;\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst BlogPost = ({data}: BlogPostProps) => {\n    const {title, url, publishedAt, content, seo} = data.hashnode.publication.post;\n\n    useEffect(() => {\n        Prism.highlightAll();\n    }, [content]);\n\n    return (\n        <Layout>\n            <title>{title}</title>\n            <h1>{title}</h1>\n            <p style={{marginTop: \"-1rem\"}}><small>{formatDate(publishedAt)}</small></p>\n            { data.hashnode.publication.post.coverImage && <img src={data.hashnode.publication.post.coverImage.url} alt={title}/> }\n            <br />\n            <div dangerouslySetInnerHTML={{__html: content.html}}/>\n            <br />\n            <SignupForm />\n            <br />\n            {\n                seo.title && <ReactCusdis\n                    attrs={{\n                        host: 'https://cusdis.com',\n                        appId: 'e9bc0bcb-d463-4f63-8604-34e78a1ec232',\n                        pageId: seo.title,\n                        pageTitle: title,\n                        pageUrl: url\n                    }}\n                />\n            }\n        </Layout>\n    );\n};\n\nexport const query = graphql`\n    query BlogPostBySlug($slug: String!) {\n        hashnode {\n            publication(host: \"xprilion.hashnode.dev\") {\n                isTeam\n                title\n                post(slug: $slug) {\n                    id\n                    title\n                    url\n                    coverImage {\n                        url\n                    }\n                    content {\n                        html\n                    }\n                    publishedAt\n                    seo {\n                        title\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default BlogPost;\n","export const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n\n    const day = date.getDate();\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const month = monthNames[date.getMonth()];\n    const year = date.getFullYear();\n\n    return `${day} ${month}, ${year}`;\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactCusdis = void 0;\nconst React = require(\"react\");\nconst useScript_1 = require(\"./useScript\");\nfunction ReactCusdis(props) {\n    const divRef = React.useRef(null);\n    const host = props.attrs.host || 'https://cusdis.com';\n    useScript_1.useScript(`${host}/js/cusdis.es.js`);\n    useScript_1.useScript(props.lang ? `${host}/js/widget/lang/${props.lang}.js` : '');\n    React.useLayoutEffect(() => {\n        // @ts-expect-error\n        const render = window.renderCusdis;\n        if (render) {\n            render(divRef.current);\n        }\n    }, [\n        props.attrs.appId,\n        props.attrs.host,\n        props.attrs.pageId,\n        props.attrs.pageTitle,\n        props.attrs.pageUrl,\n        props.lang\n    ]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { id: \"cusdis_thread\", \"data-host\": host, \"data-page-id\": props.attrs.pageId, \"data-app-id\": props.attrs.appId, \"data-page-title\": props.attrs.pageTitle, \"data-page-url\": props.attrs.pageUrl, \"data-theme\": props.attrs.theme, style: props.style, ref: divRef })));\n}\nexports.ReactCusdis = ReactCusdis;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useScript = void 0;\nconst React = require(\"react\");\nfunction useScript(src) {\n    // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n    const [status, setStatus] = React.useState(src ? \"loading\" : \"idle\");\n    React.useEffect(() => {\n        // Allow falsy src value if waiting on other data needed for\n        // constructing the script URL passed to this hook.\n        if (!src) {\n            setStatus(\"idle\");\n            return;\n        }\n        // Fetch existing script element by src\n        // It may have been added by another intance of this hook\n        let script = document.querySelector(`script[src=\"${src}\"]`);\n        if (!script) {\n            // Create script\n            script = document.createElement(\"script\");\n            script.src = src;\n            script.async = true;\n            script.setAttribute(\"data-status\", \"loading\");\n            // Add script to document body\n            document.body.appendChild(script);\n            // Store status in attribute on script\n            // This can be read by other instances of this hook\n            const setAttributeFromEvent = (event) => {\n                script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n            };\n            script.addEventListener(\"load\", setAttributeFromEvent);\n            script.addEventListener(\"error\", setAttributeFromEvent);\n        }\n        else {\n            // Grab existing script status from attribute and set to state.\n            // @ts-expect-error\n            setStatus(script.getAttribute(\"data-status\"));\n        }\n        // Script event handler to update status in state\n        // Note: Even if the script already exists we still need to add\n        // event handlers to update the state for *this* hook instance.\n        const setStateFromEvent = (event) => {\n            setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n        };\n        // Add event listeners\n        script.addEventListener(\"load\", setStateFromEvent);\n        script.addEventListener(\"error\", setStateFromEvent);\n        // Remove event listeners on cleanup\n        return () => {\n            if (script) {\n                script.removeEventListener(\"load\", setStateFromEvent);\n                script.removeEventListener(\"error\", setStateFromEvent);\n            }\n        };\n    }, [src] // Only re-run effect if script src changes\n    );\n    return status;\n}\nexports.useScript = useScript;\n"],"names":["_ref","data","title","url","publishedAt","content","seo","hashnode","publication","post","useEffect","Prism","React","Layout","style","marginTop","formatDate","coverImage","src","alt","dangerouslySetInnerHTML","__html","html","SignupForm","ReactCusdis","attrs","host","appId","pageId","pageTitle","pageUrl","dateStr","date","Date","getDate","getMonth","getFullYear","exports","useScript_1","props","divRef","useRef","useScript","lang","useLayoutEffect","render","window","renderCusdis","current","createElement","Fragment","id","theme","ref","Object","defineProperty","value","status","setStatus","useState","script","document","querySelector","getAttribute","async","setAttribute","body","appendChild","setAttributeFromEvent","event","type","addEventListener","setStateFromEvent","removeEventListener"],"sourceRoot":""}